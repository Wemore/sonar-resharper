<rules>
  <rule key="AmdDependencyPathProblem">
    <priority>INFO</priority>
    <name><![CDATA[Check 'amd-dependency' the same way as require() argument]]></name>
    <description><![CDATA[Check 'amd-dependency' the same way as require() argument]]></description>
  </rule>
  <rule key="AmdExternalModule">
    <priority>MINOR</priority>
    <name><![CDATA[AMD module may be converted to external module]]></name>
    <description><![CDATA[AMD module may be converted to external module]]></description>
  </rule>
  <rule key="AssignedValueWontBeAssignedToCorrespondingField">
    <priority>MAJOR</priority>
    <name><![CDATA[Parameter-property value assigned inside constructor won't be assigned to class property]]></name>
    <description><![CDATA[Parameter-property value assigned inside constructor won't be assigned to class property]]></description>
  </rule>
  <rule key="Class">
    <priority>MINOR</priority>
    <name><![CDATA[Class emulation may be converted to class]]></name>
    <description><![CDATA[Class emulation may be converted to class]]></description>
  </rule>
  <rule key="CommonJsExternalModule">
    <priority>MINOR</priority>
    <name><![CDATA[CommonJs module may be converted to external module]]></name>
    <description><![CDATA[CommonJs module may be converted to external module]]></description>
  </rule>
  <rule key="CreateSpecializedOverload">
    <priority>INFO</priority>
    <name><![CDATA[String literal usage allows to create specialized overload]]></name>
    <description><![CDATA[String literal usage allows to create specialized overload]]></description>
  </rule>
  <rule key="CyclicReferenceComment">
    <priority>INFO</priority>
    <name><![CDATA[Reference comment creates cyclic dependency]]></name>
    <description><![CDATA[Reference comment creates cyclic dependency]]></description>
  </rule>
  <rule key="DoubleNegationOfBoolean">
    <priority>MAJOR</priority>
    <name><![CDATA[Double negation of boolean is redundant]]></name>
    <description><![CDATA[Double negation of boolean is redundant]]></description>
  </rule>
  <rule key="DuplicateReferenceComment">
    <priority>MAJOR</priority>
    <name><![CDATA[Duplicate reference comment is redundant]]></name>
    <description><![CDATA[Duplicate reference comment is redundant]]></description>
  </rule>
  <rule key="EmptyReturnValueForTypeAnnotatedFunction">
    <priority>MAJOR</priority>
    <name><![CDATA[Empty return value for type-annotated function]]></name>
    <description><![CDATA[Empty return value for type-annotated function]]></description>
  </rule>
  <rule key="ImplicitAnyTypeWarning">
    <priority>MAJOR</priority>
    <name><![CDATA[Element has implicit 'any' type]]></name>
    <description><![CDATA[Element has implicit 'any' type]]></description>
  </rule>
  <rule key="InternalModule">
    <priority>MINOR</priority>
    <name><![CDATA[Immediately-invoked function expression may be converted to internal module]]></name>
    <description><![CDATA[Immediately-invoked function expression may be converted to internal module]]></description>
  </rule>
  <rule key="Lambda">
    <priority>MINOR</priority>
    <name><![CDATA[Function expression may be converted to lambda expression]]></name>
    <description><![CDATA[Function expression may be converted to lambda expression]]></description>
  </rule>
  <rule key="LessSpecificOverloadThanMainSignature">
    <priority>MAJOR</priority>
    <name><![CDATA[Overload is less specific than the main signature]]></name>
    <description><![CDATA[Overload is less specific than the main signature]]></description>
  </rule>
  <rule key="Method">
    <priority>MINOR</priority>
    <name><![CDATA[Member assigned by a function may be converted to function member]]></name>
    <description><![CDATA[Member assigned by a function may be converted to function member]]></description>
  </rule>
  <rule key="MoreSpecificSignatureAfterLessSpecific">
    <priority>MAJOR</priority>
    <name><![CDATA[More specific signature follows less specific]]></name>
    <description><![CDATA[More specific signature follows less specific]]></description>
  </rule>
  <rule key="OverloadSignatureInferring">
    <priority>INFO</priority>
    <name><![CDATA[Possible overloads may be inferred by function body]]></name>
    <description><![CDATA[Possible overloads may be inferred by function body]]></description>
  </rule>
  <rule key="ParameterDoesntMakeAnySense">
    <priority>MAJOR</priority>
    <name><![CDATA[Parameter doesn't participate in the main signature]]></name>
    <description><![CDATA[Parameter doesn't participate in the main signature]]></description>
  </rule>
  <rule key="PossibleInfiniteInheritance">
    <priority>MAJOR</priority>
    <name><![CDATA[Possible infinite inheritance]]></name>
    <description><![CDATA[<h2>JetBrains Code Inspection Wiki</h2> <p><a href="http://confluence.jetbrains.net/display/ReSharper/Possible+infinite+inheritance">See
      JetBrains documentation.</a></p>]]></description>
  </rule>
  <rule key="RedundantComparisonWithBoolean">
    <priority>MAJOR</priority>
    <name><![CDATA[Comparison of boolean with boolean value is equivalent to value or negated value]]></name>
    <description><![CDATA[Comparison of boolean with boolean value is equivalent to value or negated value]]></description>
  </rule>
  <rule key="RedundantDisableWarningComment">
    <priority>MAJOR</priority>
    <name><![CDATA[Redundant disable code inspection comment]]></name>
    <description><![CDATA[Redundant disable code inspection comment]]></description>
  </rule>
  <rule key="RedundantEmptyConstructor">
    <priority>MAJOR</priority>
    <name><![CDATA[Redundant empty constructor without parameters]]></name>
    <description><![CDATA[Redundant empty constructor without parameters]]></description>
  </rule>
  <rule key="RedundantParentTypeDeclaration">
    <priority>MAJOR</priority>
    <name><![CDATA[Redundant parent type specification in extends/implements]]></name>
    <description><![CDATA[Redundant parent type specification in extends/implements]]></description>
  </rule>
  <rule key="RedundantQualifier">
    <priority>MAJOR</priority>
    <name><![CDATA[Redundant qualifier]]></name>
    <description><![CDATA[Redundant qualifier]]></description>
  </rule>
  <rule key="RedundantTypeCast">
    <priority>MAJOR</priority>
    <name><![CDATA[Type cast is redundant: expression is always of provided type]]></name>
    <description><![CDATA[Type cast is redundant: expression is always of provided type]]></description>
  </rule>
  <rule key="RedundantTypeCastStructural">
    <priority>MAJOR</priority>
    <name><![CDATA[Type cast is redundant: expression is of a structurally compatible type]]></name>
    <description><![CDATA[Type cast is redundant: expression is of a structurally compatible type]]></description>
  </rule>
  <rule key="RedundantVariableTypeSpecification">
    <priority>INFO</priority>
    <name><![CDATA[Type specification is redundant, because variable type is contextually determined from the type of assigned value]]></name>
    <description><![CDATA[Type specification is redundant, because variable type is contextually determined from the type of assigned value]]></description>
  </rule>
  <rule key="SameImportsWithDifferentName">
    <priority>MAJOR</priority>
    <name><![CDATA[Same item is imported twice with different names]]></name>
    <description><![CDATA[Same item is imported twice with different names]]></description>
  </rule>
  <rule key="SpecifyVariableTypeExplicitly">
    <priority>INFO</priority>
    <name><![CDATA[Type of variable may be specified explicitly]]></name>
    <description><![CDATA[Type of variable may be specified explicitly]]></description>
  </rule>
  <rule key="SuperCall">
    <priority>MINOR</priority>
    <name><![CDATA[Invocation of parent class may be converted to super call]]></name>
    <description><![CDATA[Invocation of parent class may be converted to super call]]></description>
  </rule>
  <rule key="SuspiciousThisUsage">
    <priority>MAJOR</priority>
    <name><![CDATA[Suspicious 'this' usage in context of local function inside class member]]></name>
    <description><![CDATA[Suspicious 'this' usage in context of local function inside class member]]></description>
  </rule>
  <rule key="TernaryCanBeReplacedByItsCondition">
    <priority>MAJOR</priority>
    <name><![CDATA[Ternary operator may be replaced by it's condition]]></name>
    <description><![CDATA[Ternary operator may be replaced by it's condition]]></description>
  </rule>
  <rule key="TsNotResolved">
    <priority>BLOCKER</priority>
    <name><![CDATA[Use of undeclared variable]]></name>
    <description><![CDATA[Use of undeclared variable]]></description>
  </rule>
  <rule key="TsResolvedFromInaccessibleModule">
    <priority>BLOCKER</priority>
    <name><![CDATA[Cannot resolve, probably symbol is located in inaccessible module]]></name>
    <description><![CDATA[Cannot resolve, probably symbol is located in inaccessible module]]></description>
  </rule>
  <rule key="TypeParameterHidesTypeParamFromOuterScope">
    <priority>MAJOR</priority>
    <name><![CDATA[Type parameter hides type parameter declared in outer scope]]></name>
    <description><![CDATA[Type parameter hides type parameter declared in outer scope]]></description>
  </rule>
  <rule key="TypeScriptErrors">
    <priority>BLOCKER</priority>
    <name><![CDATA[TypeScript Compiler Errors]]></name>
    <description><![CDATA[TypeScript Compiler Errors]]></description>
  </rule>
  <rule key="TypeScriptErrors">
    <priority>MAJOR</priority>
    <name><![CDATA[TypeScript Compiler Errors]]></name>
    <description><![CDATA[TypeScript Compiler Errors]]></description>
  </rule>
  <rule key="UnusedLocalImport">
    <priority>MAJOR</priority>
    <name><![CDATA[Unused local import]]></name>
    <description><![CDATA[Unused local import]]></description>
  </rule>
  <rule key="UseOfPossiblyUnassignedProperty">
    <priority>MAJOR</priority>
    <name><![CDATA[Use of possibly unassigned property in a static initializer]]></name>
    <description><![CDATA[Use of possibly unassigned property in a static initializer]]></description>
  </rule>
  <rule key="WrongPublicModifierSpecification">
    <priority>INFO</priority>
    <name><![CDATA[Non-compliant 'public' modifier or its absense]]></name>
    <description><![CDATA[Non-compliant 'public' modifier or its absense]]></description>
  </rule>
  <rule key="WrongRequireRelativePath">
    <priority>INFO</priority>
    <name><![CDATA[Non-compliant path style inside 'require']]></name>
    <description><![CDATA[Non-compliant path style inside 'require']]></description>
  </rule>
</rules>