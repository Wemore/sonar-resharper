<rules>
  <rule key="AccessToDisposedClosure">
    <priority>MAJOR</priority>
    <name><![CDATA[Access to disposed closure]]></name>
    <description><![CDATA[Access to disposed closure]]></description>
  </rule>
  <rule key="AccessToForEachVariableInClosure">
    <priority>MAJOR</priority>
    <name><![CDATA[Access to foreach variable in closure]]></name>
    <description><![CDATA[Access to foreach variable in closure]]></description>
  </rule>
  <rule key="AccessToModifiedClosure">
    <priority>MAJOR</priority>
    <name><![CDATA[Access to modified closure]]></name>
    <description><![CDATA[<h2>JetBrains Code Inspection Wiki</h2> <p><a href="http://confluence.jetbrains.net/display/ReSharper/Access+to+modified+closure">See
      JetBrains documentation.</a></p>]]></description>
  </rule>
  <rule key="AccessToStaticMemberViaDerivedType">
    <priority>MAJOR</priority>
    <name><![CDATA[Access to a static member of a type via a derived type]]></name>
    <description><![CDATA[<h2>JetBrains Code Inspection Wiki</h2> <p><a href="http://confluence.jetbrains.net/display/ReSharper/Access+to+a+static+member+of+a+type+via+a+derived+type">See
      JetBrains documentation.</a></p>]]></description>
  </rule>
  <rule key="AnnotationConflictInHierarchy">
    <priority>MAJOR</priority>
    <name><![CDATA[Annotation conflict in hierarchy]]></name>
    <description><![CDATA[Annotation conflict in hierarchy]]></description>
  </rule>
  <rule key="AnnotationRedundancyAtValueType">
    <priority>MAJOR</priority>
    <name><![CDATA[Nullable attribute usage with declaration having value or void type]]></name>
    <description><![CDATA[Nullable attribute usage with declaration having value or void type]]></description>
  </rule>
  <rule key="AnnotationRedundancyInHierarchy">
    <priority>MAJOR</priority>
    <name><![CDATA[Annotation duplicate in hierarchy]]></name>
    <description><![CDATA[Annotation duplicate in hierarchy]]></description>
  </rule>
  <rule key="ArrangeStaticMemberQualifier">
    <priority>MAJOR</priority>
    <name><![CDATA[Add/remove qualifier for static members]]></name>
    <description><![CDATA[Add/remove qualifier for static members]]></description>
  </rule>
  <rule key="ArrangeThisQualifier">
    <priority>MAJOR</priority>
    <name><![CDATA[Add/remove 'this.' qualifier]]></name>
    <description><![CDATA[Add/remove 'this.' qualifier]]></description>
  </rule>
  <rule key="AssignNullToNotNullAttribute">
    <priority>MAJOR</priority>
    <name><![CDATA[Possible 'null' assignment to entity with '[NotNull]' attribute]]></name>
    <description><![CDATA[<h2>JetBrains Code Inspection Wiki</h2> <p><a href="http://confluence.jetbrains.net/display/ReSharper/Possible+'null'+assignment+to+an+entity+marked+with+'Value+cannot+be+null'+attribute">See
      JetBrains documentation.</a></p>]]></description>
  </rule>
  <rule key="AssignmentInConditionalExpression">
    <priority>MAJOR</priority>
    <name><![CDATA[Assignment in conditional expression]]></name>
    <description><![CDATA[Assignment in conditional expression]]></description>
  </rule>
  <rule key="AutoPropertyCanBeMadeGetOnly.Global">
    <priority>MINOR</priority>
    <name><![CDATA[Auto-property can be made get-only: Non-private accessibility]]></name>
    <description><![CDATA[Auto-property can be made get-only: Non-private accessibility]]></description>
  </rule>
  <rule key="AutoPropertyCanBeMadeGetOnly.Local">
    <priority>MINOR</priority>
    <name><![CDATA[Auto-property can be made get-only: Private accessibility]]></name>
    <description><![CDATA[Auto-property can be made get-only: Private accessibility]]></description>
  </rule>
  <rule key="BaseMemberHasParams">
    <priority>MAJOR</priority>
    <name><![CDATA[Base member has 'params' parameter, but overrider hasn't]]></name>
    <description><![CDATA[Base member has 'params' parameter, but overrider hasn't]]></description>
  </rule>
  <rule key="BaseMethodCallWithDefaultParameter">
    <priority>MAJOR</priority>
    <name><![CDATA[Call to base member with implicit default parameters]]></name>
    <description><![CDATA[Call to base member with implicit default parameters]]></description>
  </rule>
  <rule key="BaseObjectEqualsIsObjectEquals">
    <priority>MAJOR</priority>
    <name><![CDATA[Call to 'base.Equals(...)' is reference equality]]></name>
    <description><![CDATA[Call to 'base.Equals(...)' is reference equality]]></description>
  </rule>
  <rule key="BaseObjectGetHashCodeCallInGetHashCode">
    <priority>MAJOR</priority>
    <name><![CDATA[Overriden GetHashCode calls base 'Object.GetHashCode()']]></name>
    <description><![CDATA[Overriden GetHashCode calls base 'Object.GetHashCode()']]></description>
  </rule>
  <rule key="BitwiseOperatorOnEnumWithoutFlags">
    <priority>MAJOR</priority>
    <name><![CDATA[Bitwise operation on enum which is not marked by [Flags] attribute]]></name>
    <description><![CDATA[Bitwise operation on enum which is not marked by [Flags] attribute]]></description>
  </rule>
  <rule key="BuiltInTypeReferenceStyle">
    <priority>INFO</priority>
    <name><![CDATA[Replace built-in type reference with a CLR type name or a keyword]]></name>
    <description><![CDATA[Replace built-in type reference with a CLR type name or a keyword]]></description>
  </rule>
  <rule key="CSharpErrors">
    <priority>BLOCKER</priority>
    <name><![CDATA[C# Compiler Errors]]></name>
    <description><![CDATA[C# Compiler Errors]]></description>
  </rule>
  <rule key="CSharpWarnings::CS0108">
    <priority>MAJOR</priority>
    <name><![CDATA[CS0108,CS0114: Keyword 'new' is required]]></name>
    <description><![CDATA[CS0108,CS0114: Keyword 'new' is required]]></description>
  </rule>
  <rule key="CSharpWarnings::CS0109">
    <priority>MAJOR</priority>
    <name><![CDATA[CS0109: Keyword 'new' is redundant]]></name>
    <description><![CDATA[CS0109: Keyword 'new' is redundant]]></description>
  </rule>
  <rule key="CSharpWarnings::CS0162">
    <priority>MAJOR</priority>
    <name><![CDATA[CS0162: Code is unreachable]]></name>
    <description><![CDATA[CS0162: Code is unreachable]]></description>
  </rule>
  <rule key="CSharpWarnings::CS0183">
    <priority>MAJOR</priority>
    <name><![CDATA[CS0183: Given expression is always of the provided type]]></name>
    <description><![CDATA[CS0183: Given expression is always of the provided type]]></description>
  </rule>
  <rule key="CSharpWarnings::CS0184">
    <priority>MAJOR</priority>
    <name><![CDATA[CS0184: Given expression is never of the provided type]]></name>
    <description><![CDATA[CS0184: Given expression is never of the provided type]]></description>
  </rule>
  <rule key="CSharpWarnings::CS0197">
    <priority>MAJOR</priority>
    <name><![CDATA[CS0197: Taking address of marshal-by-reference class field]]></name>
    <description><![CDATA[CS0197: Taking address of marshal-by-reference class field]]></description>
  </rule>
  <rule key="CSharpWarnings::CS0252">
    <priority>MAJOR</priority>
    <name><![CDATA[CS0252,CS0253: Possible unintended reference comparison]]></name>
    <description><![CDATA[CS0252,CS0253: Possible unintended reference comparison]]></description>
  </rule>
  <rule key="CSharpWarnings::CS0420">
    <priority>MAJOR</priority>
    <name><![CDATA[CS0420:Reference to a volatile field will not be treated as volatile]]></name>
    <description><![CDATA[CS0420:Reference to a volatile field will not be treated as volatile]]></description>
  </rule>
  <rule key="CSharpWarnings::CS0465">
    <priority>MAJOR</priority>
    <name><![CDATA[CS0465: Introducing a 'Finalize' method can interfere with destructor invocation]]></name>
    <description><![CDATA[CS0465: Introducing a 'Finalize' method can interfere with destructor invocation]]></description>
  </rule>
  <rule key="CSharpWarnings::CS0469">
    <priority>MAJOR</priority>
    <name><![CDATA[CS0469: 'goto case' value is not implicitly convertible to required type]]></name>
    <description><![CDATA[CS0469: 'goto case' value is not implicitly convertible to required type]]></description>
  </rule>
  <rule key="CSharpWarnings::CS0612">
    <priority>MAJOR</priority>
    <name><![CDATA[CS0612: Use of obsolete symbol (without message)]]></name>
    <description><![CDATA[CS0612: Use of obsolete symbol (without message)]]></description>
  </rule>
  <rule key="CSharpWarnings::CS0618">
    <priority>MAJOR</priority>
    <name><![CDATA[CS0618: Use of obsolete symbol]]></name>
    <description><![CDATA[CS0618: Use of obsolete symbol]]></description>
  </rule>
  <rule key="CSharpWarnings::CS0628">
    <priority>MAJOR</priority>
    <name><![CDATA[CS0628: Declaring new protected member in sealed class is the same as declaring it as private]]></name>
    <description><![CDATA[CS0628: Declaring new protected member in sealed class is the same as declaring it as private]]></description>
  </rule>
  <rule key="CSharpWarnings::CS0642">
    <priority>MAJOR</priority>
    <name><![CDATA[CS0642: Possible mistaken empty statement]]></name>
    <description><![CDATA[CS0642: Possible mistaken empty statement]]></description>
  </rule>
  <rule key="CSharpWarnings::CS0657">
    <priority>MAJOR</priority>
    <name><![CDATA[CS0657: 'attribute modifier' is not a valid attribute location for this declaration. All attributes in this block will be ignored]]></name>
    <description><![CDATA[CS0657: 'attribute modifier' is not a valid attribute location for this declaration. All attributes in this block will be ignored]]></description>
  </rule>
  <rule key="CSharpWarnings::CS0658">
    <priority>MAJOR</priority>
    <name><![CDATA[CS0658: 'attribute modifier' is not a recognized attribute location. All attributes in this block will be ignored]]></name>
    <description><![CDATA[CS0658: 'attribute modifier' is not a recognized attribute location. All attributes in this block will be ignored]]></description>
  </rule>
  <rule key="CSharpWarnings::CS0659">
    <priority>MAJOR</priority>
    <name><![CDATA[CS0659: Class overrides Object.Equals(object o) but not Object.GetHashCode()]]></name>
    <description><![CDATA[CS0659: Class overrides Object.Equals(object o) but not Object.GetHashCode()]]></description>
  </rule>
  <rule key="CSharpWarnings::CS0660">
    <priority>MAJOR</priority>
    <name><![CDATA[CS0660,CS0661: Operator '==' or operator '!=' with 'Object.Equals(object o)' and 'Object.GetHashCode()' not overriden]]></name>
    <description><![CDATA[CS0660,CS0661: Operator '==' or operator '!=' with 'Object.Equals(object o)' and 'Object.GetHashCode()' not overriden]]></description>
  </rule>
  <rule key="CSharpWarnings::CS0665">
    <priority>MAJOR</priority>
    <name><![CDATA[CS0665: Assignment in conditional expression]]></name>
    <description><![CDATA[CS0665: Assignment in conditional expression]]></description>
  </rule>
  <rule key="CSharpWarnings::CS0672">
    <priority>MAJOR</priority>
    <name><![CDATA[CS0672: Member overrides obsolete member]]></name>
    <description><![CDATA[CS0672: Member overrides obsolete member]]></description>
  </rule>
  <rule key="CSharpWarnings::CS0693">
    <priority>MAJOR</priority>
    <name><![CDATA[CS0693: Type parameter has the same name as a type parameter from the outer type]]></name>
    <description><![CDATA[CS0693: Type parameter has the same name as a type parameter from the outer type]]></description>
  </rule>
  <rule key="CSharpWarnings::CS1030">
    <priority>MAJOR</priority>
    <name><![CDATA[CS1030: '#warning' directive]]></name>
    <description><![CDATA[CS1030: '#warning' directive]]></description>
  </rule>
  <rule key="CSharpWarnings::CS1058">
    <priority>MAJOR</priority>
    <name><![CDATA[CS1058: A previous catch clause already catches all exceptions]]></name>
    <description><![CDATA[CS1058: A previous catch clause already catches all exceptions]]></description>
  </rule>
  <rule key="CSharpWarnings::CS1066">
    <priority>MAJOR</priority>
    <name><![CDATA[CS1066: Default value specified for parameter will have no effect because it applies to a member that is used in contexts that do not allow optional arguments]]></name>
    <description><![CDATA[CS1066: Default value specified for parameter will have no effect because it applies to a member that is used in contexts that do not allow optional arguments]]></description>
  </rule>
  <rule key="CSharpWarnings::CS1522">
    <priority>MAJOR</priority>
    <name><![CDATA[CS1522: Empty switch block]]></name>
    <description><![CDATA[CS1522: Empty switch block]]></description>
  </rule>
  <rule key="CSharpWarnings::CS1570">
    <priority>MAJOR</priority>
    <name><![CDATA[CS1570: Invalid XML in XML comment]]></name>
    <description><![CDATA[CS1570: Invalid XML in XML comment]]></description>
  </rule>
  <rule key="CSharpWarnings::CS1571">
    <priority>MAJOR</priority>
    <name><![CDATA[CS1571: Duplicate param tag in XML comment]]></name>
    <description><![CDATA[CS1571: Duplicate param tag in XML comment]]></description>
  </rule>
  <rule key="CSharpWarnings::CS1573">
    <priority>MAJOR</priority>
    <name><![CDATA[CS1573: Parameter has no matching param tag in the XML comment]]></name>
    <description><![CDATA[CS1573: Parameter has no matching param tag in the XML comment]]></description>
  </rule>
  <rule key="CSharpWarnings::CS1574">
    <priority>MAJOR</priority>
    <name><![CDATA[CS1574: Ambiguous reference in XML comment]]></name>
    <description><![CDATA[CS1574: Ambiguous reference in XML comment]]></description>
  </rule>
  <rule key="CSharpWarnings::CS1580">
    <priority>MAJOR</priority>
    <name><![CDATA[CS1580: Incorrect signature in XML comment]]></name>
    <description><![CDATA[CS1580: Incorrect signature in XML comment]]></description>
  </rule>
  <rule key="CSharpWarnings::CS1584">
    <priority>MAJOR</priority>
    <name><![CDATA[CS1584: Syntax error in XML comment]]></name>
    <description><![CDATA[CS1584: Syntax error in XML comment]]></description>
  </rule>
  <rule key="CSharpWarnings::CS1587">
    <priority>MAJOR</priority>
    <name><![CDATA[CS1587: XML comment is not placed on a valid language element]]></name>
    <description><![CDATA[CS1587: XML comment is not placed on a valid language element]]></description>
  </rule>
  <rule key="CSharpWarnings::CS1589">
    <priority>MAJOR</priority>
    <name><![CDATA[CS1589: Unable to include XML fragment]]></name>
    <description><![CDATA[CS1589: Unable to include XML fragment]]></description>
  </rule>
  <rule key="CSharpWarnings::CS1590">
    <priority>MAJOR</priority>
    <name><![CDATA[CS1590: Invalid XML include element]]></name>
    <description><![CDATA[CS1590: Invalid XML include element]]></description>
  </rule>
  <rule key="CSharpWarnings::CS1591">
    <priority>MAJOR</priority>
    <name><![CDATA[CS1591:Missing XML comment for publicly visible type or member]]></name>
    <description><![CDATA[CS1591:Missing XML comment for publicly visible type or member]]></description>
  </rule>
  <rule key="CSharpWarnings::CS1592">
    <priority>MAJOR</priority>
    <name><![CDATA[CS1592: Badly formed XML in included comments file]]></name>
    <description><![CDATA[CS1592: Badly formed XML in included comments file]]></description>
  </rule>
  <rule key="CSharpWarnings::CS1710">
    <priority>MAJOR</priority>
    <name><![CDATA[CS1710: Duplicate typeparam tag in XML comment]]></name>
    <description><![CDATA[CS1710: Duplicate typeparam tag in XML comment]]></description>
  </rule>
  <rule key="CSharpWarnings::CS1712">
    <priority>MAJOR</priority>
    <name><![CDATA[CS1712: Type parameter has no matching typeparam tag in the XML comment]]></name>
    <description><![CDATA[CS1712: Type parameter has no matching typeparam tag in the XML comment]]></description>
  </rule>
  <rule key="CSharpWarnings::CS1717">
    <priority>MAJOR</priority>
    <name><![CDATA[CS1717: Assignment made to same variable]]></name>
    <description><![CDATA[CS1717: Assignment made to same variable]]></description>
  </rule>
  <rule key="CSharpWarnings::CS1723">
    <priority>MAJOR</priority>
    <name><![CDATA[CS1723: XML comment has cref attribute that refers to a type parameter]]></name>
    <description><![CDATA[CS1723: XML comment has cref attribute that refers to a type parameter]]></description>
  </rule>
  <rule key="CSharpWarnings::CS1911">
    <priority>MAJOR</priority>
    <name><![CDATA[CS1911: Access to a member through 'base' keyword from anonymous method, lambda expression, query expression or iterator results in unverifiable code]]></name>
    <description><![CDATA[CS1911: Access to a member through 'base' keyword from anonymous method, lambda expression, query expression or iterator results in unverifiable code]]></description>
  </rule>
  <rule key="CSharpWarnings::CS1957">
    <priority>MAJOR</priority>
    <name><![CDATA[CS1957: Multiple override candidates at run-time]]></name>
    <description><![CDATA[CS1957: Multiple override candidates at run-time]]></description>
  </rule>
  <rule key="CSharpWarnings::CS1998">
    <priority>MAJOR</priority>
    <name><![CDATA[CS1998: Async function without await expression]]></name>
    <description><![CDATA[CS1998: Async function without await expression]]></description>
  </rule>
  <rule key="CSharpWarnings::CS4014">
    <priority>MAJOR</priority>
    <name><![CDATA[CS4014: Async method invocation without await expression]]></name>
    <description><![CDATA[CS4014: Async method invocation without await expression]]></description>
  </rule>
  <rule key="CSharpWarnings::CS7095">
    <priority>MAJOR</priority>
    <name><![CDATA[CS7095: Filter expression is a constant, consider removing the filter]]></name>
    <description><![CDATA[CS7095: Filter expression is a constant, consider removing the filter]]></description>
  </rule>
  <rule key="CSharpWarnings::CS8094">
    <priority>MAJOR</priority>
    <name><![CDATA[CS8094: Alignment value 'value' has a magnitude greater than 'magnitude limit' and may result in a large formatted string.]]></name>
    <description><![CDATA[CS8094: Alignment value 'value' has a magnitude greater than 'magnitude limit' and may result in a large formatted string.]]></description>
  </rule>
  <rule key="CSharpWarnings::WME006">
    <priority>MAJOR</priority>
    <name><![CDATA[WME006:Namespace should be default namespace of this project]]></name>
    <description><![CDATA[WME006:Namespace should be default namespace of this project]]></description>
  </rule>
  <rule key="CanBeReplacedWithTryCastAndCheckForNull">
    <priority>MINOR</priority>
    <name><![CDATA[Type check and casts can be replaced with try cast]]></name>
    <description><![CDATA[Type check and casts can be replaced with try cast]]></description>
  </rule>
  <rule key="CannotApplyEqualityOperatorToType">
    <priority>MAJOR</priority>
    <name><![CDATA[Compare with '==' types marked by 'CannotApplyEqualityOperatorAttribute']]></name>
    <description><![CDATA[<h2>JetBrains Code Inspection Wiki</h2> <p><a href="http://confluence.jetbrains.net/display/ReSharper/Compare+with+%27%3D%3D%27+types+marked+by+%27CannotApplyEqualityOperatorAttribute%27">See
      JetBrains documentation.</a></p>]]></description>
  </rule>
  <rule key="CheckForReferenceEqualityInstead.1">
    <priority>MINOR</priority>
    <name><![CDATA[Check for reference equality instead: Check for reference equality instead]]></name>
    <description><![CDATA[Check for reference equality instead: Check for reference equality instead]]></description>
  </rule>
  <rule key="CheckForReferenceEqualityInstead.2">
    <priority>MINOR</priority>
    <name><![CDATA[Check for reference equality instead: Check for reference equality instead]]></name>
    <description><![CDATA[Check for reference equality instead: Check for reference equality instead]]></description>
  </rule>
  <rule key="CheckNamespace">
    <priority>MAJOR</priority>
    <name><![CDATA[Namespace does not correspond to file location]]></name>
    <description><![CDATA[<h2>JetBrains Code Inspection Wiki</h2> <p><a href="http://confluence.jetbrains.net/display/ReSharper/Namespace+does+not+correspond+to+file+location">See
      JetBrains documentation.</a></p>]]></description>
  </rule>
  <rule key="ClassCanBeSealed.Global">
    <priority>INFO</priority>
    <name><![CDATA[Class can be made sealed(non-inheritable): Non-private accessibility]]></name>
    <description><![CDATA[Class can be made sealed(non-inheritable): Non-private accessibility]]></description>
  </rule>
  <rule key="ClassCanBeSealed.Local">
    <priority>INFO</priority>
    <name><![CDATA[Class can be made sealed(non-inheritable): Private accessibility]]></name>
    <description><![CDATA[Class can be made sealed(non-inheritable): Private accessibility]]></description>
  </rule>
  <rule key="ClassCannotBeInstantiated">
    <priority>MAJOR</priority>
    <name><![CDATA[Class cannot be instantiated]]></name>
    <description><![CDATA[Class cannot be instantiated]]></description>
  </rule>
  <rule key="ClassNeverInstantiated.Global">
    <priority>MINOR</priority>
    <name><![CDATA[Class is never instantiated: Non-private accessibility]]></name>
    <description><![CDATA[Class is never instantiated: Non-private accessibility]]></description>
  </rule>
  <rule key="ClassNeverInstantiated.Local">
    <priority>MINOR</priority>
    <name><![CDATA[Class is never instantiated: Private accessibility]]></name>
    <description><![CDATA[Class is never instantiated: Private accessibility]]></description>
  </rule>
  <rule key="ClassWithVirtualMembersNeverInherited.Global">
    <priority>MINOR</priority>
    <name><![CDATA[Class with virtual(overridable) members never inherited: Non-private accessibility]]></name>
    <description><![CDATA[Class with virtual(overridable) members never inherited: Non-private accessibility]]></description>
  </rule>
  <rule key="ClassWithVirtualMembersNeverInherited.Local">
    <priority>MINOR</priority>
    <name><![CDATA[Class with virtual(overridable) members never inherited: Private accessibility]]></name>
    <description><![CDATA[Class with virtual(overridable) members never inherited: Private accessibility]]></description>
  </rule>
  <rule key="CoVariantArrayConversion">
    <priority>MAJOR</priority>
    <name><![CDATA[Co-variant array conversion]]></name>
    <description><![CDATA[Co-variant array conversion]]></description>
  </rule>
  <rule key="CodeSmell">
    <priority>BLOCKER</priority>
    <name><![CDATA[Potential Code Quality Issues]]></name>
    <description><![CDATA[Potential Code Quality Issues]]></description>
  </rule>
  <rule key="CollectionNeverQueried.Global">
    <priority>MAJOR</priority>
    <name><![CDATA[Collection's content is never queried: Non-private accessibility]]></name>
    <description><![CDATA[Collection's content is never queried: Non-private accessibility]]></description>
  </rule>
  <rule key="CollectionNeverQueried.Local">
    <priority>MAJOR</priority>
    <name><![CDATA[Collection's content is never queried: Private accessibility]]></name>
    <description><![CDATA[Collection's content is never queried: Private accessibility]]></description>
  </rule>
  <rule key="CollectionNeverUpdated.Global">
    <priority>MAJOR</priority>
    <name><![CDATA[Collection is never updated: Non-private accessibility]]></name>
    <description><![CDATA[Collection is never updated: Non-private accessibility]]></description>
  </rule>
  <rule key="CollectionNeverUpdated.Local">
    <priority>MAJOR</priority>
    <name><![CDATA[Collection is never updated: Private accessibility]]></name>
    <description><![CDATA[Collection is never updated: Private accessibility]]></description>
  </rule>
  <rule key="CompareNonConstrainedGenericWithNull">
    <priority>INFO</priority>
    <name><![CDATA[Possible compare of value type with 'null']]></name>
    <description><![CDATA[<h2>JetBrains Code Inspection Wiki</h2> <p><a href="http://confluence.jetbrains.net/display/ReSharper/Possible+compare+of+value+type+with+null">See
      JetBrains documentation.</a></p>]]></description>
  </rule>
  <rule key="CompareOfFloatsByEqualityOperator">
    <priority>MAJOR</priority>
    <name><![CDATA[Compare of float numbers with equality operator]]></name>
    <description><![CDATA[<h2>JetBrains Code Inspection Wiki</h2> <p><a href="http://confluence.jetbrains.net/display/ReSharper/Compare+of+float+numbers+by+equality+operator">See
      JetBrains documentation.</a></p>]]></description>
  </rule>
  <rule key="ConditionIsAlwaysTrueOrFalse">
    <priority>MAJOR</priority>
    <name><![CDATA[Expression is always 'true' or always 'false']]></name>
    <description><![CDATA[Expression is always 'true' or always 'false']]></description>
  </rule>
  <rule key="ConditionalTernaryEqualBranch">
    <priority>MAJOR</priority>
    <name><![CDATA['?:' expression has identical true and false branches]]></name>
    <description><![CDATA['?:' expression has identical true and false branches]]></description>
  </rule>
  <rule key="ConstantConditionalAccessQualifier">
    <priority>MAJOR</priority>
    <name><![CDATA[Conditional access qualifier expression is known to be null or not null]]></name>
    <description><![CDATA[Conditional access qualifier expression is known to be null or not null]]></description>
  </rule>
  <rule key="ConstantNullCoalescingCondition">
    <priority>MAJOR</priority>
    <name><![CDATA['??' condition is known to be null or not null]]></name>
    <description><![CDATA['??' condition is known to be null or not null]]></description>
  </rule>
  <rule key="ConstructorInitializerLoop">
    <priority>MAJOR</priority>
    <name><![CDATA[Possible cyclic constructor call]]></name>
    <description><![CDATA[<h2>JetBrains Code Inspection Wiki</h2> <p><a href="http://confluence.jetbrains.net/display/ReSharper/Possible+cyclic+constructor+call">See
      JetBrains documentation.</a></p>]]></description>
  </rule>
  <rule key="ContractAnnotationNotParsed">
    <priority>MAJOR</priority>
    <name><![CDATA[Problem in contract annotation definition]]></name>
    <description><![CDATA[Problem in contract annotation definition]]></description>
  </rule>
  <rule key="ConvertClosureToMethodGroup">
    <priority>MINOR</priority>
    <name><![CDATA[Convert lambda expression to method group]]></name>
    <description><![CDATA[Convert lambda expression to method group]]></description>
  </rule>
  <rule key="ConvertConditionalTernaryToNullCoalescing">
    <priority>MINOR</priority>
    <name><![CDATA['?:' expression can be re-written as '??' expression]]></name>
    <description><![CDATA['?:' expression can be re-written as '??' expression]]></description>
  </rule>
  <rule key="ConvertIfDoToWhile">
    <priority>MINOR</priority>
    <name><![CDATA[Convert 'if do while' to 'while]]></name>
    <description><![CDATA[Convert 'if do while' to 'while]]></description>
  </rule>
  <rule key="ConvertIfStatementToConditionalTernaryExpression">
    <priority>MINOR</priority>
    <name><![CDATA['if' statement can be re-written as '?:' expression]]></name>
    <description><![CDATA['if' statement can be re-written as '?:' expression]]></description>
  </rule>
  <rule key="ConvertIfStatementToNullCoalescingExpression">
    <priority>MINOR</priority>
    <name><![CDATA['if' statement can be re-written as '??' expression]]></name>
    <description><![CDATA['if' statement can be re-written as '??' expression]]></description>
  </rule>
  <rule key="ConvertIfStatementToReturnStatement">
    <priority>INFO</priority>
    <name><![CDATA['if-return' statement can be re-written as 'return' statement]]></name>
    <description><![CDATA['if-return' statement can be re-written as 'return' statement]]></description>
  </rule>
  <rule key="ConvertIfStatementToSwitchStatement">
    <priority>INFO</priority>
    <name><![CDATA[Convert 'if' statement to 'switch' statement]]></name>
    <description><![CDATA[Convert 'if' statement to 'switch' statement]]></description>
  </rule>
  <rule key="ConvertIfToOrExpression">
    <priority>MINOR</priority>
    <name><![CDATA[Convert 'if' to '||']]></name>
    <description><![CDATA[Convert 'if' to '||']]></description>
  </rule>
  <rule key="ConvertMethodToExpressionBody">
    <priority>INFO</priority>
    <name><![CDATA[Convert to method with expression body]]></name>
    <description><![CDATA[Convert to method with expression body]]></description>
  </rule>
  <rule key="ConvertNullableToShortForm">
    <priority>MINOR</priority>
    <name><![CDATA[Convert 'Nullable<T>' to 'T?']]></name>
    <description><![CDATA[<h2>JetBrains Code Inspection Wiki</h2> <p><a href="http://confluence.jetbrains.net/pages/viewpage.action?pageId=37235229">See
      JetBrains documentation.</a></p>]]></description>
  </rule>
  <rule key="ConvertPropertyToExpressionBody">
    <priority>MINOR</priority>
    <name><![CDATA[Convert to property with expression body]]></name>
    <description><![CDATA[Convert to property with expression body]]></description>
  </rule>
  <rule key="ConvertToAutoProperty">
    <priority>MINOR</priority>
    <name><![CDATA[Convert property to auto-property]]></name>
    <description><![CDATA[Convert property to auto-property]]></description>
  </rule>
  <rule key="ConvertToAutoPropertyWhenPossible">
    <priority>INFO</priority>
    <name><![CDATA[Convert property to auto-property when possible]]></name>
    <description><![CDATA[Convert property to auto-property when possible]]></description>
  </rule>
  <rule key="ConvertToAutoPropertyWithPrivateSetter">
    <priority>INFO</priority>
    <name><![CDATA[Convert property to auto-property with private setter]]></name>
    <description><![CDATA[Convert property to auto-property with private setter]]></description>
  </rule>
  <rule key="ConvertToConstant.Global">
    <priority>INFO</priority>
    <name><![CDATA[Convert local variable or field to constant: Non-private accessibility]]></name>
    <description><![CDATA[Convert local variable or field to constant: Non-private accessibility]]></description>
  </rule>
  <rule key="ConvertToConstant.Local">
    <priority>INFO</priority>
    <name><![CDATA[Convert local variable or field to constant: Private accessibility]]></name>
    <description><![CDATA[Convert local variable or field to constant: Private accessibility]]></description>
  </rule>
  <rule key="ConvertToExpressionBodyWhenPossible">
    <priority>INFO</priority>
    <name><![CDATA[Convert to member with expression body (when possible)]]></name>
    <description><![CDATA[Convert to member with expression body (when possible)]]></description>
  </rule>
  <rule key="ConvertToLambdaExpression">
    <priority>MINOR</priority>
    <name><![CDATA[Convert to lambda expression]]></name>
    <description><![CDATA[Convert to lambda expression]]></description>
  </rule>
  <rule key="ConvertToLambdaExpressionWhenPossible">
    <priority>INFO</priority>
    <name><![CDATA[Convert to lambda expression (when possible)]]></name>
    <description><![CDATA[Convert to lambda expression (when possible)]]></description>
  </rule>
  <rule key="ConvertToStaticClass">
    <priority>MINOR</priority>
    <name><![CDATA[Convert to static class]]></name>
    <description><![CDATA[Convert to static class]]></description>
  </rule>
  <rule key="DefaultValueAttributeForOptionalParameter">
    <priority>MAJOR</priority>
    <name><![CDATA[Possibly misleading 'DefaultValueAttribute' usage to define optional parameter value]]></name>
    <description><![CDATA[Possibly misleading 'DefaultValueAttribute' usage to define optional parameter value]]></description>
  </rule>
  <rule key="DelegateSubtraction">
    <priority>MAJOR</priority>
    <name><![CDATA[Delegate subtractions]]></name>
    <description><![CDATA[<h2>JetBrains Code Inspection Wiki</h2> <p><a href="http://confluence.jetbrains.net/display/ReSharper/Delegate+subtraction+has+unpredicatable+semantics">See
      JetBrains documentation.</a></p>]]></description>
  </rule>
  <rule key="DoNotCallOverridableMethodsInConstructor">
    <priority>MAJOR</priority>
    <name><![CDATA[Virtual member call in constructor]]></name>
    <description><![CDATA[<h2>JetBrains Code Inspection Wiki</h2> <p><a href="http://confluence.jetbrains.net/display/ReSharper/Virtual+method+call+in+constructor">See
      JetBrains documentation.</a></p>]]></description>
  </rule>
  <rule key="DoubleNegationOperator">
    <priority>MINOR</priority>
    <name><![CDATA[Double negation operator]]></name>
    <description><![CDATA[<h2>JetBrains Code Inspection Wiki</h2> <p><a href="http://confluence.jetbrains.net/display/ReSharper/Double+negation+operator">See
      JetBrains documentation.</a></p>]]></description>
  </rule>
  <rule key="DynamicShiftRightOpIsNotInt">
    <priority>MAJOR</priority>
    <name><![CDATA[Right operand of dynamic shift operation should be convertible to 'int']]></name>
    <description><![CDATA[Right operand of dynamic shift operation should be convertible to 'int']]></description>
  </rule>
  <rule key="EmptyConstructor">
    <priority>MAJOR</priority>
    <name><![CDATA[Empty constructor]]></name>
    <description><![CDATA[<h2>JetBrains Code Inspection Wiki</h2> <p><a href="http://confluence.jetbrains.net/display/ReSharper/Empty+static+constructor+is+redundant">See
      JetBrains documentation.</a></p>]]></description>
  </rule>
  <rule key="EmptyDestructor">
    <priority>MAJOR</priority>
    <name><![CDATA[Empty destructor]]></name>
    <description><![CDATA[Empty destructor]]></description>
  </rule>
  <rule key="EmptyEmbeddedStatement">
    <priority>MAJOR</priority>
    <name><![CDATA[Empty control statement body]]></name>
    <description><![CDATA[Empty control statement body]]></description>
  </rule>
  <rule key="EmptyForStatement">
    <priority>MAJOR</priority>
    <name><![CDATA[Empty 'for' loop is redundant]]></name>
    <description><![CDATA[Empty 'for' loop is redundant]]></description>
  </rule>
  <rule key="EmptyGeneralCatchClause">
    <priority>MAJOR</priority>
    <name><![CDATA[Empty general catch clause]]></name>
    <description><![CDATA[<h2>JetBrains Code Inspection Wiki</h2> <p><a href="http://confluence.jetbrains.net/display/ReSharper/Empty+general+catch+clause+suppresses+all+errors">See
      JetBrains documentation.</a></p>]]></description>
  </rule>
  <rule key="EmptyNamespace">
    <priority>MAJOR</priority>
    <name><![CDATA[Empty namespace declaration]]></name>
    <description><![CDATA[Empty namespace declaration]]></description>
  </rule>
  <rule key="EmptyStatement">
    <priority>MAJOR</priority>
    <name><![CDATA[Empty statement is redundant]]></name>
    <description><![CDATA[Empty statement is redundant]]></description>
  </rule>
  <rule key="EnumUnderlyingTypeIsInt">
    <priority>MAJOR</priority>
    <name><![CDATA[Underlying type of enum is 'int']]></name>
    <description><![CDATA[<h2>JetBrains Code Inspection Wiki</h2> <p><a href="http://confluence.jetbrains.net/display/ReSharper/Underlying+type+of+enum+is+'int'">See
      JetBrains documentation.</a></p>]]></description>
  </rule>
  <rule key="EnumerableSumInExplicitUncheckedContext">
    <priority>MAJOR</priority>
    <name><![CDATA['Enumerable.Sum' invocation in explicit unchecked context]]></name>
    <description><![CDATA['Enumerable.Sum' invocation in explicit unchecked context]]></description>
  </rule>
  <rule key="EqualExpressionComparison">
    <priority>MAJOR</priority>
    <name><![CDATA[Similar expressions comparison]]></name>
    <description><![CDATA[Similar expressions comparison]]></description>
  </rule>
  <rule key="EventNeverInvoked">
    <priority>MAJOR</priority>
    <name><![CDATA[Event never invoked]]></name>
    <description><![CDATA[Event never invoked]]></description>
  </rule>
  <rule key="EventNeverInvoked.Global">
    <priority>MINOR</priority>
    <name><![CDATA[Abstract or virtual(overridable) event is never invoked]]></name>
    <description><![CDATA[Abstract or virtual(overridable) event is never invoked]]></description>
  </rule>
  <rule key="EventNeverSubscribedTo.Global">
    <priority>MINOR</priority>
    <name><![CDATA[Event is never subscribed to: Non-private accessibility]]></name>
    <description><![CDATA[Event is never subscribed to: Non-private accessibility]]></description>
  </rule>
  <rule key="EventNeverSubscribedTo.Local">
    <priority>MINOR</priority>
    <name><![CDATA[Event is never subscribed to: Private accessibility]]></name>
    <description><![CDATA[Event is never subscribed to: Private accessibility]]></description>
  </rule>
  <rule key="EventUnsubscriptionViaAnonymousDelegate">
    <priority>MAJOR</priority>
    <name><![CDATA[Event unsubscription via anonymous delegate]]></name>
    <description><![CDATA[Event unsubscription via anonymous delegate]]></description>
  </rule>
  <rule key="ExplicitCallerInfoArgument">
    <priority>MAJOR</priority>
    <name><![CDATA[Explicit argument passed to parameter with caller info attribute]]></name>
    <description><![CDATA[Explicit argument passed to parameter with caller info attribute]]></description>
  </rule>
  <rule key="ExpressionIsAlwaysNull">
    <priority>MAJOR</priority>
    <name><![CDATA[Expression is always 'null']]></name>
    <description><![CDATA[Expression is always 'null']]></description>
  </rule>
  <rule key="FieldCanBeMadeReadOnly.Global">
    <priority>MINOR</priority>
    <name><![CDATA[Field can be made readonly: Non-private accessibility]]></name>
    <description><![CDATA[Field can be made readonly: Non-private accessibility]]></description>
  </rule>
  <rule key="FieldCanBeMadeReadOnly.Local">
    <priority>MINOR</priority>
    <name><![CDATA[Field can be made readonly: Private accessibility]]></name>
    <description><![CDATA[<h2>JetBrains Code Inspection Wiki</h2> <p><a href="http://confluence.jetbrains.net/display/ReSharper/Field+can+be+made+read-only">See
      JetBrains documentation.</a></p>]]></description>
  </rule>
  <rule key="ForCanBeConvertedToForeach">
    <priority>MINOR</priority>
    <name><![CDATA[For-loop can be converted into foreach-loop]]></name>
    <description><![CDATA[For-loop can be converted into foreach-loop]]></description>
  </rule>
  <rule key="ForStatementConditionIsTrue">
    <priority>MAJOR</priority>
    <name><![CDATA['true' is redundant as 'for'-statement condition]]></name>
    <description><![CDATA['true' is redundant as 'for'-statement condition]]></description>
  </rule>
  <rule key="FormatStringProblem">
    <priority>MAJOR</priority>
    <name><![CDATA[String formatting method problems]]></name>
    <description><![CDATA[String formatting method problems]]></description>
  </rule>
  <rule key="FunctionComplexityOverflow">
    <priority>INFO</priority>
    <name><![CDATA[Function body is too complex to analyze]]></name>
    <description><![CDATA[Function body is too complex to analyze]]></description>
  </rule>
  <rule key="FunctionNeverReturns">
    <priority>MAJOR</priority>
    <name><![CDATA[Function never returns]]></name>
    <description><![CDATA[Function never returns]]></description>
  </rule>
  <rule key="FunctionRecursiveOnAllPaths">
    <priority>MAJOR</priority>
    <name><![CDATA[Function is recursive on all execution paths]]></name>
    <description><![CDATA[Function is recursive on all execution paths]]></description>
  </rule>
  <rule key="GCSuppressFinalizeForTypeWithoutDestructor">
    <priority>MAJOR</priority>
    <name><![CDATA['GC.SuppressFinalize' is invoked for type without destructor]]></name>
    <description><![CDATA['GC.SuppressFinalize' is invoked for type without destructor]]></description>
  </rule>
  <rule key="HeuristicUnreachableCode">
    <priority>MAJOR</priority>
    <name><![CDATA[Heuristically unreachable code]]></name>
    <description><![CDATA[Heuristically unreachable code]]></description>
  </rule>
  <rule key="ImplicitlyCapturedClosure">
    <priority>INFO</priority>
    <name><![CDATA[Implicitly captured closure]]></name>
    <description><![CDATA[Implicitly captured closure]]></description>
  </rule>
  <rule key="ImpureMethodCallOnReadonlyValueField">
    <priority>MAJOR</priority>
    <name><![CDATA[Impure method is called for readonly field of value type]]></name>
    <description><![CDATA[Impure method is called for readonly field of value type]]></description>
  </rule>
  <rule key="InconsistentNaming">
    <priority>MAJOR</priority>
    <name><![CDATA[Inconsistent Naming]]></name>
    <description><![CDATA[Inconsistent Naming]]></description>
  </rule>
  <rule key="InconsistentlySynchronizedField">
    <priority>MAJOR</priority>
    <name><![CDATA[Inconsistent synchronization on field]]></name>
    <description><![CDATA[Inconsistent synchronization on field]]></description>
  </rule>
  <rule key="InterpolatedStringExpressionIsNotIFormattable">
    <priority>MAJOR</priority>
    <name><![CDATA[Formatting is specified, but interpolated string expression is not IFormattable]]></name>
    <description><![CDATA[Formatting is specified, but interpolated string expression is not IFormattable]]></description>
  </rule>
  <rule key="IntroduceOptionalParameters.Global">
    <priority>MINOR</priority>
    <name><![CDATA[Introduce optional parameters: Non-private accessibility]]></name>
    <description><![CDATA[Introduce optional parameters: Non-private accessibility]]></description>
  </rule>
  <rule key="IntroduceOptionalParameters.Local">
    <priority>MINOR</priority>
    <name><![CDATA[Introduce optional parameters: Private accessibility]]></name>
    <description><![CDATA[Introduce optional parameters: Private accessibility]]></description>
  </rule>
  <rule key="InvertCondition.1">
    <priority>INFO</priority>
    <name><![CDATA[Invert condition: Invert condition]]></name>
    <description><![CDATA[Invert condition: Invert condition]]></description>
  </rule>
  <rule key="InvertIf">
    <priority>INFO</priority>
    <name><![CDATA[Invert 'if' statement to reduce nesting]]></name>
    <description><![CDATA[<h2>JetBrains Code Inspection Wiki</h2> <p><a href="http://confluence.jetbrains.net/display/ReSharper/Invert+'if'+to+reduce+nesting">See
      JetBrains documentation.</a></p>]]></description>
  </rule>
  <rule key="InvocationIsSkipped">
    <priority>INFO</priority>
    <name><![CDATA[Method invocation is skipped]]></name>
    <description><![CDATA[<h2>JetBrains Code Inspection Wiki</h2> <p><a href="http://confluence.jetbrains.net/display/ReSharper/Method+invocation+is+skipped">See
      JetBrains documentation.</a></p>]]></description>
  </rule>
  <rule key="InvokeAsExtensionMethod">
    <priority>MINOR</priority>
    <name><![CDATA[Convert static method invocation to extension method call]]></name>
    <description><![CDATA[Convert static method invocation to extension method call]]></description>
  </rule>
  <rule key="IsExpressionAlwaysFalse">
    <priority>MAJOR</priority>
    <name><![CDATA[The given expression of 'is' operator is never of the provided type]]></name>
    <description><![CDATA[The given expression of 'is' operator is never of the provided type]]></description>
  </rule>
  <rule key="IsExpressionAlwaysTrue">
    <priority>MAJOR</priority>
    <name><![CDATA[The given expression of 'is' operator is always of the provided type]]></name>
    <description><![CDATA[The given expression of 'is' operator is always of the provided type]]></description>
  </rule>
  <rule key="IteratorMethodResultIsIgnored">
    <priority>MAJOR</priority>
    <name><![CDATA[Return value of iterator is not used]]></name>
    <description><![CDATA[Return value of iterator is not used]]></description>
  </rule>
  <rule key="JoinDeclarationAndInitializer">
    <priority>MINOR</priority>
    <name><![CDATA[Join local variable declaration and assignment]]></name>
    <description><![CDATA[Join local variable declaration and assignment]]></description>
  </rule>
  <rule key="LocalVariableHidesMember">
    <priority>MAJOR</priority>
    <name><![CDATA[Local variable hides member]]></name>
    <description><![CDATA[<h2>JetBrains Code Inspection Wiki</h2> <p><a href="http://confluence.jetbrains.net/display/ReSharper/Local+variable+hides+member">See
      JetBrains documentation.</a></p>]]></description>
  </rule>
  <rule key="LocalizableElement">
    <priority>MAJOR</priority>
    <name><![CDATA[Element is localizable]]></name>
    <description><![CDATA[Element is localizable]]></description>
  </rule>
  <rule key="LongLiteralEndingLowerL">
    <priority>MAJOR</priority>
    <name><![CDATA[Long literal ending with 'l' instead of 'L']]></name>
    <description><![CDATA[Long literal ending with 'l' instead of 'L']]></description>
  </rule>
  <rule key="LoopCanBeConvertedToQuery">
    <priority>MINOR</priority>
    <name><![CDATA[Loop can be converted into LINQ-expression]]></name>
    <description><![CDATA[<h2>JetBrains Code Inspection Wiki</h2> <p><a href="http://confluence.jetbrains.net/display/ReSharper/Loop+can+be+converted+into+a+LINQ+expression">See
      JetBrains documentation.</a></p>]]></description>
  </rule>
  <rule key="LoopCanBePartlyConvertedToQuery">
    <priority>INFO</priority>
    <name><![CDATA[Part of loop's body can be converted into LINQ-expression]]></name>
    <description><![CDATA[Part of loop's body can be converted into LINQ-expression]]></description>
  </rule>
  <rule key="LoopVariableIsNeverChangedInsideLoop">
    <priority>MAJOR</priority>
    <name><![CDATA[Loop control variable is never changed inside loop]]></name>
    <description><![CDATA[Loop control variable is never changed inside loop]]></description>
  </rule>
  <rule key="MeaninglessDefaultParameterValue">
    <priority>MAJOR</priority>
    <name><![CDATA['DefaultParameterValueAttribute' should be used in conjunction with 'OptionalAttribute']]></name>
    <description><![CDATA['DefaultParameterValueAttribute' should be used in conjunction with 'OptionalAttribute']]></description>
  </rule>
  <rule key="MemberCanBeInternal">
    <priority>INFO</priority>
    <name><![CDATA[Member or type can be made internal(friend)]]></name>
    <description><![CDATA[Member or type can be made internal(friend)]]></description>
  </rule>
  <rule key="MemberCanBeMadeStatic.Global">
    <priority>INFO</priority>
    <name><![CDATA[Member can be made static(shared): Non-private accessibility]]></name>
    <description><![CDATA[Member can be made static(shared): Non-private accessibility]]></description>
  </rule>
  <rule key="MemberCanBeMadeStatic.Local">
    <priority>INFO</priority>
    <name><![CDATA[Member can be made static(shared): Private accessibility]]></name>
    <description><![CDATA[Member can be made static(shared): Private accessibility]]></description>
  </rule>
  <rule key="MemberCanBePrivate.Global">
    <priority>MINOR</priority>
    <name><![CDATA[Member can be made private: Non-private accessibility]]></name>
    <description><![CDATA[Member can be made private: Non-private accessibility]]></description>
  </rule>
  <rule key="MemberCanBePrivate.Local">
    <priority>MINOR</priority>
    <name><![CDATA[Member can be made private: Private accessibility]]></name>
    <description><![CDATA[Member can be made private: Private accessibility]]></description>
  </rule>
  <rule key="MemberCanBeProtected.Global">
    <priority>MINOR</priority>
    <name><![CDATA[Member can be made protected: Non-private accessibility]]></name>
    <description><![CDATA[Member can be made protected: Non-private accessibility]]></description>
  </rule>
  <rule key="MemberCanBeProtected.Local">
    <priority>MINOR</priority>
    <name><![CDATA[Member can be made protected: Private accessibility]]></name>
    <description><![CDATA[Member can be made protected: Private accessibility]]></description>
  </rule>
  <rule key="MemberHidesStaticFromOuterClass">
    <priority>MAJOR</priority>
    <name><![CDATA[Member hides static member from outer class]]></name>
    <description><![CDATA[Member hides static member from outer class]]></description>
  </rule>
  <rule key="MemberInitializerValueIgnored">
    <priority>MAJOR</priority>
    <name><![CDATA[Member initialized value ignored]]></name>
    <description><![CDATA[Member initialized value ignored]]></description>
  </rule>
  <rule key="MergeConditionalExpression">
    <priority>MINOR</priority>
    <name><![CDATA[Merge conditional ?: expression into conditional access]]></name>
    <description><![CDATA[Merge conditional ?: expression into conditional access]]></description>
  </rule>
  <rule key="MergeSequentialChecks">
    <priority>MINOR</priority>
    <name><![CDATA[Merge sequential checks in && or || expressions]]></name>
    <description><![CDATA[Merge sequential checks in && or || expressions]]></description>
  </rule>
  <rule key="MethodOverloadWithOptionalParameter">
    <priority>MAJOR</priority>
    <name><![CDATA[Method with optional or 'params' parameter is hidden by overload]]></name>
    <description><![CDATA[Method with optional or 'params' parameter is hidden by overload]]></description>
  </rule>
  <rule key="MethodSupportsCancellation">
    <priority>MINOR</priority>
    <name><![CDATA[Method supports cancellation]]></name>
    <description><![CDATA[Method supports cancellation]]></description>
  </rule>
  <rule key="MoreSpecificForeachVariableTypeAvailable">
    <priority>MINOR</priority>
    <name><![CDATA[Iteration variable can be declared with a more specific type]]></name>
    <description><![CDATA[<h2>JetBrains Code Inspection Wiki</h2> <p><a href="http://confluence.jetbrains.net/display/ReSharper/Iteration+variable+can+be+declared+with+a+more+specific+type">See
      JetBrains documentation.</a></p>]]></description>
  </rule>
  <rule key="MultipleNullableAttributesUsage">
    <priority>MAJOR</priority>
    <name><![CDATA[Multiple nullable attributes usage]]></name>
    <description><![CDATA[<h2>JetBrains Code Inspection Wiki</h2> <p><a href="http://confluence.jetbrains.net/display/ReSharper/Multiple+nullable+attributes+usage">See
      JetBrains documentation.</a></p>]]></description>
  </rule>
  <rule key="MultipleOrderBy">
    <priority>MAJOR</priority>
    <name><![CDATA[Multiple sequential 'OrderBy' invocation]]></name>
    <description><![CDATA[Multiple sequential 'OrderBy' invocation]]></description>
  </rule>
  <rule key="NegativeEqualityExpression">
    <priority>MINOR</priority>
    <name><![CDATA[Simplify negative equality expression]]></name>
    <description><![CDATA[<h2>JetBrains Code Inspection Wiki</h2> <p><a href="http://confluence.jetbrains.net/display/ReSharper/Simplify+negative+equality+expression">See
      JetBrains documentation.</a></p>]]></description>
  </rule>
  <rule key="NonReadonlyMemberInGetHashCode">
    <priority>MAJOR</priority>
    <name><![CDATA[Non-readonly type member referenced in 'GetHashCode()']]></name>
    <description><![CDATA[Non-readonly type member referenced in 'GetHashCode()']]></description>
  </rule>
  <rule key="NonVolatileFieldInDoubleCheckLocking">
    <priority>MAJOR</priority>
    <name><![CDATA[Possible incorrect implementation of Double-Check Locking. Checked field must be volatile or assigned from local variable after 'Thread.MemoryBarrier()' call]]></name>
    <description><![CDATA[Possible incorrect implementation of Double-Check Locking. Checked field must be volatile or assigned from local variable after 'Thread.MemoryBarrier()' call]]></description>
  </rule>
  <rule key="NotAccessedField.Compiler">
    <priority>MAJOR</priority>
    <name><![CDATA[Non-accessed field]]></name>
    <description><![CDATA[Non-accessed field]]></description>
  </rule>
  <rule key="NotAccessedField.Global">
    <priority>MINOR</priority>
    <name><![CDATA[Non-accessed field: Non-private accessibility]]></name>
    <description><![CDATA[Non-accessed field: Non-private accessibility]]></description>
  </rule>
  <rule key="NotAccessedField.Local">
    <priority>MAJOR</priority>
    <name><![CDATA[Non-accessed field: Private accessibility]]></name>
    <description><![CDATA[Non-accessed field: Private accessibility]]></description>
  </rule>
  <rule key="NotAccessedVariable">
    <priority>MAJOR</priority>
    <name><![CDATA[Non-accessed local variable]]></name>
    <description><![CDATA[Non-accessed local variable]]></description>
  </rule>
  <rule key="NotAccessedVariable.Compiler">
    <priority>MAJOR</priority>
    <name><![CDATA[Non-accessed local variable]]></name>
    <description><![CDATA[Non-accessed local variable]]></description>
  </rule>
  <rule key="NotNullMemberIsNotInitialized">
    <priority>MAJOR</priority>
    <name><![CDATA[Member with '[NotNull]' attribute is not initialized at constructor exit]]></name>
    <description><![CDATA[Member with '[NotNull]' attribute is not initialized at constructor exit]]></description>
  </rule>
  <rule key="NotResolvedInText">
    <priority>MAJOR</priority>
    <name><![CDATA[Cannot resolve symbol in text argument]]></name>
    <description><![CDATA[Cannot resolve symbol in text argument]]></description>
  </rule>
  <rule key="ObjectCreationAsStatement">
    <priority>MAJOR</priority>
    <name><![CDATA[Possible unassigned object created by 'new' expression]]></name>
    <description><![CDATA[Possible unassigned object created by 'new' expression]]></description>
  </rule>
  <rule key="OperatorIsCanBeUsed">
    <priority>MAJOR</priority>
    <name><![CDATA[Operator 'is'/'Type Of ... Is ...' can be used]]></name>
    <description><![CDATA[Operator 'is'/'Type Of ... Is ...' can be used]]></description>
  </rule>
  <rule key="OptionalParameterHierarchyMismatch">
    <priority>MAJOR</priority>
    <name><![CDATA[Mismatch optional parameter value in overridden method]]></name>
    <description><![CDATA[Mismatch optional parameter value in overridden method]]></description>
  </rule>
  <rule key="OptionalParameterRefOut">
    <priority>MAJOR</priority>
    <name><![CDATA['ref' or 'out' parameter with [Optional] attribute]]></name>
    <description><![CDATA['ref' or 'out' parameter with [Optional] attribute]]></description>
  </rule>
  <rule key="ParameterHidesMember">
    <priority>MAJOR</priority>
    <name><![CDATA[Parameter hides member]]></name>
    <description><![CDATA[Parameter hides member]]></description>
  </rule>
  <rule key="ParameterTypeCanBeEnumerable.Global">
    <priority>INFO</priority>
    <name><![CDATA[Parameter type can be IEnumerable<T>: Non-private accessibility]]></name>
    <description><![CDATA[Parameter type can be IEnumerable<T>: Non-private accessibility]]></description>
  </rule>
  <rule key="ParameterTypeCanBeEnumerable.Local">
    <priority>INFO</priority>
    <name><![CDATA[Parameter type can be IEnumerable<T>: Private accessibility]]></name>
    <description><![CDATA[<h2>JetBrains Code Inspection Wiki</h2> <p><a href="http://confluence.jetbrains.net/display/ReSharper/Parameter+type+can+be+IEnumerable+of+T">See
      JetBrains documentation.</a></p>]]></description>
  </rule>
  <rule key="PartialMethodParameterNameMismatch">
    <priority>MAJOR</priority>
    <name><![CDATA[Parameter name differs in partial method declaration]]></name>
    <description><![CDATA[Parameter name differs in partial method declaration]]></description>
  </rule>
  <rule key="PartialMethodWithSinglePart">
    <priority>MAJOR</priority>
    <name><![CDATA[Redundant 'partial' modifier on method declaration]]></name>
    <description><![CDATA[Redundant 'partial' modifier on method declaration]]></description>
  </rule>
  <rule key="PartialTypeWithSinglePart">
    <priority>MAJOR</priority>
    <name><![CDATA[Redundant 'partial' modifier on type declaration]]></name>
    <description><![CDATA[Redundant 'partial' modifier on type declaration]]></description>
  </rule>
  <rule key="PolymorphicFieldLikeEventInvocation">
    <priority>MAJOR</priority>
    <name><![CDATA[Invocation of polymorphic field-like event]]></name>
    <description><![CDATA[<h2>JetBrains Code Inspection Wiki</h2> <p><a href="http://confluence.jetbrains.net/display/ReSharper/Invocation+of+polymorphic+field-like+event">See
      JetBrains documentation.</a></p>]]></description>
  </rule>
  <rule key="PossibleAssignmentToReadonlyField">
    <priority>MAJOR</priority>
    <name><![CDATA[Assignment to a property of a readonly field can be useless]]></name>
    <description><![CDATA[<h2>JetBrains Code Inspection Wiki</h2> <p><a href="http://confluence.jetbrains.net/display/ReSharper/Assignment+to+a+property+of+a+readonly+field+can+be+useless">See
      JetBrains documentation.</a></p>]]></description>
  </rule>
  <rule key="PossibleInfiniteInheritance">
    <priority>MAJOR</priority>
    <name><![CDATA[Possible infinite inheritance]]></name>
    <description><![CDATA[<h2>JetBrains Code Inspection Wiki</h2> <p><a href="http://confluence.jetbrains.net/display/ReSharper/Possible+infinite+inheritance">See
      JetBrains documentation.</a></p>]]></description>
  </rule>
  <rule key="PossibleIntendedRethrow">
    <priority>MAJOR</priority>
    <name><![CDATA[Exception rethrow possibly intended]]></name>
    <description><![CDATA[Exception rethrow possibly intended]]></description>
  </rule>
  <rule key="PossibleInterfaceMemberAmbiguity">
    <priority>MAJOR</priority>
    <name><![CDATA[Possible ambiguity while accessing member by interface]]></name>
    <description><![CDATA[Possible ambiguity while accessing member by interface]]></description>
  </rule>
  <rule key="PossibleInvalidCastException">
    <priority>MAJOR</priority>
    <name><![CDATA[Possible 'System.InvalidCastException']]></name>
    <description><![CDATA[Possible 'System.InvalidCastException']]></description>
  </rule>
  <rule key="PossibleInvalidCastExceptionInForeachLoop">
    <priority>MAJOR</priority>
    <name><![CDATA[Possible 'System.InvalidCastException' in foreach loop]]></name>
    <description><![CDATA[Possible 'System.InvalidCastException' in foreach loop]]></description>
  </rule>
  <rule key="PossibleInvalidOperationException">
    <priority>MAJOR</priority>
    <name><![CDATA[Possible 'System.InvalidOperationException']]></name>
    <description><![CDATA[Possible 'System.InvalidOperationException']]></description>
  </rule>
  <rule key="PossibleLossOfFraction">
    <priority>MAJOR</priority>
    <name><![CDATA[Possible loss of fraction]]></name>
    <description><![CDATA[Possible loss of fraction]]></description>
  </rule>
  <rule key="PossibleMistakenArgument">
    <priority>MAJOR</priority>
    <name><![CDATA[Possible mistaken argument: Possible mistaken argument]]></name>
    <description><![CDATA[Possible mistaken argument: Possible mistaken argument]]></description>
  </rule>
  <rule key="PossibleMistakenCallToGetType.1">
    <priority>MAJOR</priority>
    <name><![CDATA[Possible mistaken call to GetType(): Possible mistaken call to GetType()]]></name>
    <description><![CDATA[Possible mistaken call to GetType(): Possible mistaken call to GetType()]]></description>
  </rule>
  <rule key="PossibleMistakenCallToGetType.2">
    <priority>MAJOR</priority>
    <name><![CDATA[Possible mistaken call to GetType(): Possible mistaken call to GetType()]]></name>
    <description><![CDATA[Possible mistaken call to GetType(): Possible mistaken call to GetType()]]></description>
  </rule>
  <rule key="PossibleMultipleEnumeration">
    <priority>MAJOR</priority>
    <name><![CDATA[Possible multiple enumeration of IEnumerable]]></name>
    <description><![CDATA[<h2>JetBrains Code Inspection Wiki</h2> <p><a href="http://confluence.jetbrains.net/display/ReSharper/Possible+multiple+enumeration+of+IEnumerable">See
      JetBrains documentation.</a></p>]]></description>
  </rule>
  <rule key="PossibleMultipleWriteAccessInDoubleCheckLocking">
    <priority>MAJOR</priority>
    <name><![CDATA[Possible incorrect implementation of Double-Check Locking pattern. Possible multiple write access to checked field]]></name>
    <description><![CDATA[<h2>JetBrains Code Inspection Wiki</h2> <p><a href="http://confluence.jetbrains.net/display/ReSharper/Possible+multiple+write+access+in+double-checked+locking">See
      JetBrains documentation.</a></p>]]></description>
  </rule>
  <rule key="PossibleNullReferenceException">
    <priority>MAJOR</priority>
    <name><![CDATA[Possible 'System.NullReferenceException']]></name>
    <description><![CDATA[Possible 'System.NullReferenceException']]></description>
  </rule>
  <rule key="PossibleUnintendedReferenceComparison">
    <priority>MAJOR</priority>
    <name><![CDATA[Possible unintended reference comparison]]></name>
    <description><![CDATA[Possible unintended reference comparison]]></description>
  </rule>
  <rule key="PossiblyMistakenUseOfParamsMethod">
    <priority>MAJOR</priority>
    <name><![CDATA[Method with 'params' is invoked while more specific method is available]]></name>
    <description><![CDATA[Method with 'params' is invoked while more specific method is available]]></description>
  </rule>
  <rule key="PrivateFieldCanBeConvertedToLocalVariable">
    <priority>MAJOR</priority>
    <name><![CDATA[Private field can be converted to local variable]]></name>
    <description><![CDATA[Private field can be converted to local variable]]></description>
  </rule>
  <rule key="PropertyNotResolved">
    <priority>BLOCKER</priority>
    <name><![CDATA[Cannot resolve property]]></name>
    <description><![CDATA[Cannot resolve property]]></description>
  </rule>
  <rule key="PublicConstructorInAbstractClass">
    <priority>MINOR</priority>
    <name><![CDATA[Make constructor in abstract class protected]]></name>
    <description><![CDATA[<h2>JetBrains Code Inspection Wiki</h2> <p><a href="http://confluence.jetbrains.net/display/ReSharper/Make+constructor+in+abstract+class+protected">See
      JetBrains documentation.</a></p>]]></description>
  </rule>
  <rule key="PureAttributeOnVoidMethod">
    <priority>MAJOR</priority>
    <name><![CDATA['void' method is annotated by [Pure]]]></name>
    <description><![CDATA['void' method is annotated by [Pure]]]></description>
  </rule>
  <rule key="ReadAccessInDoubleCheckLocking">
    <priority>MAJOR</priority>
    <name><![CDATA[Possible incorrect implementation of Double-Check Locking pattern. Read access to checked field]]></name>
    <description><![CDATA[<h2>JetBrains Code Inspection Wiki</h2> <p><a href="http://confluence.jetbrains.net/display/ReSharper/Read+access+in+double+checked+locking">See
      JetBrains documentation.</a></p>]]></description>
  </rule>
  <rule key="RedundantAnonymousTypePropertyName">
    <priority>MAJOR</priority>
    <name><![CDATA[Redundant anonymous type property explicit name]]></name>
    <description><![CDATA[Redundant anonymous type property explicit name]]></description>
  </rule>
  <rule key="RedundantArgumentDefaultValue">
    <priority>MAJOR</priority>
    <name><![CDATA[Redundant argument with default value]]></name>
    <description><![CDATA[Redundant argument with default value]]></description>
  </rule>
  <rule key="RedundantArgumentName">
    <priority>INFO</priority>
    <name><![CDATA[Redundant explicit argument name specification]]></name>
    <description><![CDATA[Redundant explicit argument name specification]]></description>
  </rule>
  <rule key="RedundantArgumentNameForLiteralExpression">
    <priority>INFO</priority>
    <name><![CDATA[Redundant explicit argument name specification for literal expression]]></name>
    <description><![CDATA[Redundant explicit argument name specification for literal expression]]></description>
  </rule>
  <rule key="RedundantArrayCreationExpression">
    <priority>INFO</priority>
    <name><![CDATA[Array creation can be replaced with array initializer]]></name>
    <description><![CDATA[Array creation can be replaced with array initializer]]></description>
  </rule>
  <rule key="RedundantAssignment">
    <priority>MAJOR</priority>
    <name><![CDATA[Assignment is not used]]></name>
    <description><![CDATA[Assignment is not used]]></description>
  </rule>
  <rule key="RedundantAttributeParentheses">
    <priority>INFO</priority>
    <name><![CDATA[Parentheses are redundant if attribute has no arguments]]></name>
    <description><![CDATA[Parentheses are redundant if attribute has no arguments]]></description>
  </rule>
  <rule key="RedundantAttributeUsageProperty">
    <priority>MINOR</priority>
    <name><![CDATA[Redundant [AttributeUsage] attribute property assignment]]></name>
    <description><![CDATA[Redundant [AttributeUsage] attribute property assignment]]></description>
  </rule>
  <rule key="RedundantBaseConstructorCall">
    <priority>MAJOR</priority>
    <name><![CDATA[Redundant base constructor call]]></name>
    <description><![CDATA[Redundant base constructor call]]></description>
  </rule>
  <rule key="RedundantBaseQualifier">
    <priority>MAJOR</priority>
    <name><![CDATA[Redundant 'base.' qualifier]]></name>
    <description><![CDATA[Redundant 'base.' qualifier]]></description>
  </rule>
  <rule key="RedundantBoolCompare">
    <priority>MAJOR</priority>
    <name><![CDATA[Redundant boolean comparison]]></name>
    <description><![CDATA[Redundant boolean comparison]]></description>
  </rule>
  <rule key="RedundantCaseLabel">
    <priority>MAJOR</priority>
    <name><![CDATA[Redundant 'case' label]]></name>
    <description><![CDATA[Redundant 'case' label]]></description>
  </rule>
  <rule key="RedundantCast">
    <priority>MAJOR</priority>
    <name><![CDATA[Redundant cast]]></name>
    <description><![CDATA[Redundant cast]]></description>
  </rule>
  <rule key="RedundantCast.0">
    <priority>MAJOR</priority>
    <name><![CDATA[Redundant cast to 'object': Redundant cast to 'object']]></name>
    <description><![CDATA[Redundant cast to 'object': Redundant cast to 'object']]></description>
  </rule>
  <rule key="RedundantCatchClause">
    <priority>MAJOR</priority>
    <name><![CDATA[Redundant catch clause]]></name>
    <description><![CDATA[<h2>JetBrains Code Inspection Wiki</h2> <p><a href="http://confluence.jetbrains.net/display/ReSharper/Catch+clause+is+redundant">See
      JetBrains documentation.</a></p>]]></description>
  </rule>
  <rule key="RedundantCheckBeforeAssignment">
    <priority>MAJOR</priority>
    <name><![CDATA[Redundant condition check before assignments]]></name>
    <description><![CDATA[Redundant condition check before assignments]]></description>
  </rule>
  <rule key="RedundantCollectionInitializerElementBraces">
    <priority>INFO</priority>
    <name><![CDATA[Redundant braces in collection initializer]]></name>
    <description><![CDATA[Redundant braces in collection initializer]]></description>
  </rule>
  <rule key="RedundantCommaInAttributeList">
    <priority>INFO</priority>
    <name><![CDATA[Redundant comma in attribute list]]></name>
    <description><![CDATA[Redundant comma in attribute list]]></description>
  </rule>
  <rule key="RedundantCommaInEnumDeclaration">
    <priority>INFO</priority>
    <name><![CDATA[Redundant comma in enum declaration]]></name>
    <description><![CDATA[Redundant comma in enum declaration]]></description>
  </rule>
  <rule key="RedundantCommaInInitializer">
    <priority>INFO</priority>
    <name><![CDATA[Redundant comma in array/object/collection/anonymous type initializer]]></name>
    <description><![CDATA[Redundant comma in array/object/collection/anonymous type initializer]]></description>
  </rule>
  <rule key="RedundantDefaultMemberInitializer">
    <priority>MAJOR</priority>
    <name><![CDATA[Redundant member initializer]]></name>
    <description><![CDATA[Redundant member initializer]]></description>
  </rule>
  <rule key="RedundantDelegateCreation">
    <priority>MAJOR</priority>
    <name><![CDATA[Explicit delegate creation expression is redundant]]></name>
    <description><![CDATA[Explicit delegate creation expression is redundant]]></description>
  </rule>
  <rule key="RedundantDisableWarningComment">
    <priority>MAJOR</priority>
    <name><![CDATA[Redundant disable code inspection comment]]></name>
    <description><![CDATA[Redundant disable code inspection comment]]></description>
  </rule>
  <rule key="RedundantEmptyDefaultSwitchBranch">
    <priority>MAJOR</priority>
    <name><![CDATA[Redundant empty default switch branch]]></name>
    <description><![CDATA[Redundant empty default switch branch]]></description>
  </rule>
  <rule key="RedundantEmptyFinallyBlock">
    <priority>MAJOR</priority>
    <name><![CDATA[Redundant empty finally block]]></name>
    <description><![CDATA[Redundant empty finally block]]></description>
  </rule>
  <rule key="RedundantEmptyObjectCreationArgumentList">
    <priority>INFO</priority>
    <name><![CDATA[Redundant empty argument list on object creation expression]]></name>
    <description><![CDATA[Redundant empty argument list on object creation expression]]></description>
  </rule>
  <rule key="RedundantEmptyObjectOrCollectionInitializer">
    <priority>MAJOR</priority>
    <name><![CDATA[Redundant empty object or collection initializer]]></name>
    <description><![CDATA[Redundant empty object or collection initializer]]></description>
  </rule>
  <rule key="RedundantEnumerableCastCall">
    <priority>MAJOR</priority>
    <name><![CDATA[Redundant 'IEnumerable.Cast<T>' or 'IEnumerable.OfType<T>' call]]></name>
    <description><![CDATA[Redundant 'IEnumerable.Cast<T>' or 'IEnumerable.OfType<T>' call]]></description>
  </rule>
  <rule key="RedundantExplicitArrayCreation">
    <priority>MAJOR</priority>
    <name><![CDATA[Redundant explicit type in array creation]]></name>
    <description><![CDATA[Redundant explicit type in array creation]]></description>
  </rule>
  <rule key="RedundantExplicitArraySize">
    <priority>MAJOR</priority>
    <name><![CDATA[Redundant explicit size specification in array creation]]></name>
    <description><![CDATA[Redundant explicit size specification in array creation]]></description>
  </rule>
  <rule key="RedundantExplicitNullableCreation">
    <priority>MAJOR</priority>
    <name><![CDATA[Redundant explicit nullable type creation]]></name>
    <description><![CDATA[Redundant explicit nullable type creation]]></description>
  </rule>
  <rule key="RedundantExplicitParamsArrayCreation">
    <priority>MINOR</priority>
    <name><![CDATA[Redundant explicit array creation in argument of 'params' parameter]]></name>
    <description><![CDATA[Redundant explicit array creation in argument of 'params' parameter]]></description>
  </rule>
  <rule key="RedundantExtendsListEntry">
    <priority>MAJOR</priority>
    <name><![CDATA[Redundant class or interface specification in base types list]]></name>
    <description><![CDATA[Redundant class or interface specification in base types list]]></description>
  </rule>
  <rule key="RedundantIfElseBlock">
    <priority>INFO</priority>
    <name><![CDATA[Redundant 'else' keyword]]></name>
    <description><![CDATA[<h2>JetBrains Code Inspection Wiki</h2> <p><a href="http://confluence.jetbrains.net/display/ReSharper/Redundant+'else'+keyword">See
      JetBrains documentation.</a></p>]]></description>
  </rule>
  <rule key="RedundantJumpStatement">
    <priority>MAJOR</priority>
    <name><![CDATA[Redundant control flow jump statement]]></name>
    <description><![CDATA[Redundant control flow jump statement]]></description>
  </rule>
  <rule key="RedundantLambdaParameterType">
    <priority>MAJOR</priority>
    <name><![CDATA[Redundant lambda parameter explicit type specification]]></name>
    <description><![CDATA[Redundant lambda parameter explicit type specification]]></description>
  </rule>
  <rule key="RedundantLambdaSignatureParentheses">
    <priority>MAJOR</priority>
    <name><![CDATA[Redundant lambda signature parentheses]]></name>
    <description><![CDATA[Redundant lambda signature parentheses]]></description>
  </rule>
  <rule key="RedundantLogicalConditionalExpressionOperand">
    <priority>MAJOR</priority>
    <name><![CDATA[Redundant operand in logical conditional expression]]></name>
    <description><![CDATA[Redundant operand in logical conditional expression]]></description>
  </rule>
  <rule key="RedundantNameQualifier">
    <priority>MAJOR</priority>
    <name><![CDATA[Redundant name qualifier]]></name>
    <description><![CDATA[Redundant name qualifier]]></description>
  </rule>
  <rule key="RedundantOverload.Global">
    <priority>MINOR</priority>
    <name><![CDATA[Redundant method overload: Non-private accessibility]]></name>
    <description><![CDATA[Redundant method overload: Non-private accessibility]]></description>
  </rule>
  <rule key="RedundantOverload.Local">
    <priority>MINOR</priority>
    <name><![CDATA[Redundant method overload: Private accessibility]]></name>
    <description><![CDATA[Redundant method overload: Private accessibility]]></description>
  </rule>
  <rule key="RedundantOverridenMember">
    <priority>MAJOR</priority>
    <name><![CDATA[Redundant member override]]></name>
    <description><![CDATA[Redundant member override]]></description>
  </rule>
  <rule key="RedundantParams">
    <priority>MAJOR</priority>
    <name><![CDATA['params' modifier is always ignored on overrides]]></name>
    <description><![CDATA['params' modifier is always ignored on overrides]]></description>
  </rule>
  <rule key="RedundantStringFormatCall">
    <priority>MAJOR</priority>
    <name><![CDATA[Redundant 'string.Format()' call]]></name>
    <description><![CDATA[Redundant 'string.Format()' call]]></description>
  </rule>
  <rule key="RedundantStringInterpolation">
    <priority>MINOR</priority>
    <name><![CDATA[Redundant string interpolation]]></name>
    <description><![CDATA[Redundant string interpolation]]></description>
  </rule>
  <rule key="RedundantStringToCharArrayCall">
    <priority>MAJOR</priority>
    <name><![CDATA[Redundant 'string.ToCharArray()' call]]></name>
    <description><![CDATA[Redundant 'string.ToCharArray()' call]]></description>
  </rule>
  <rule key="RedundantTernaryExpression">
    <priority>MAJOR</priority>
    <name><![CDATA[Redundant conditional ternary expression usage]]></name>
    <description><![CDATA[Redundant conditional ternary expression usage]]></description>
  </rule>
  <rule key="RedundantToStringCall">
    <priority>MAJOR</priority>
    <name><![CDATA[Redundant 'object.ToString()' call]]></name>
    <description><![CDATA[Redundant 'object.ToString()' call]]></description>
  </rule>
  <rule key="RedundantToStringCallForValueType">
    <priority>INFO</priority>
    <name><![CDATA[Redundant 'object.ToString()' call for value types]]></name>
    <description><![CDATA[Redundant 'object.ToString()' call for value types]]></description>
  </rule>
  <rule key="RedundantTypeArgumentsOfMethod">
    <priority>MAJOR</priority>
    <name><![CDATA[Redundant type arguments of method]]></name>
    <description><![CDATA[Redundant type arguments of method]]></description>
  </rule>
  <rule key="RedundantUnsafeContext">
    <priority>MAJOR</priority>
    <name><![CDATA[Unsafe context declaration is redundant]]></name>
    <description><![CDATA[Unsafe context declaration is redundant]]></description>
  </rule>
  <rule key="RedundantUsingDirective">
    <priority>MAJOR</priority>
    <name><![CDATA[Redundant using directive]]></name>
    <description><![CDATA[<h2>JetBrains Code Inspection Wiki</h2> <p><a href="http://confluence.jetbrains.net/display/ReSharper/Redundant+using+directive">See
      JetBrains documentation.</a></p>]]></description>
  </rule>
  <rule key="ReferenceEqualsWithValueType">
    <priority>MAJOR</priority>
    <name><![CDATA['Object.ReferenceEquals' is always false because it is called with value type]]></name>
    <description><![CDATA['Object.ReferenceEquals' is always false because it is called with value type]]></description>
  </rule>
  <rule key="RegExpErrors">
    <priority>BLOCKER</priority>
    <name><![CDATA[Regular Expression Errors]]></name>
    <description><![CDATA[Regular Expression Errors]]></description>
  </rule>
  <rule key="RemoveConstuctorInvocation">
    <priority>INFO</priority>
    <name><![CDATA[Remove constuctor invocation: Remove constuctor invocation]]></name>
    <description><![CDATA[Remove constuctor invocation: Remove constuctor invocation]]></description>
  </rule>
  <rule key="RemoveRedundantOrStatement.False">
    <priority>MINOR</priority>
    <name><![CDATA[Remove redundant statement: Remove redundant statement]]></name>
    <description><![CDATA[Remove redundant statement: Remove redundant statement]]></description>
  </rule>
  <rule key="RemoveRedundantOrStatement.True">
    <priority>MINOR</priority>
    <name><![CDATA[Remove redundant statement: Remove redundant statement]]></name>
    <description><![CDATA[Remove redundant statement: Remove redundant statement]]></description>
  </rule>
  <rule key="RemoveToList.1">
    <priority>MINOR</priority>
    <name><![CDATA[Remove ToList(): Remove ToList()]]></name>
    <description><![CDATA[Remove ToList(): Remove ToList()]]></description>
  </rule>
  <rule key="RemoveToList.2">
    <priority>MINOR</priority>
    <name><![CDATA[Remove ToList(): Remove ToList()]]></name>
    <description><![CDATA[Remove ToList(): Remove ToList()]]></description>
  </rule>
  <rule key="ReplaceWithFirstOrDefault.1">
    <priority>MINOR</priority>
    <name><![CDATA[Replace with FirstOrDefault($args$): Replace with FirstOrDefault($args$)]]></name>
    <description><![CDATA[Replace with FirstOrDefault($args$): Replace with FirstOrDefault($args$)]]></description>
  </rule>
  <rule key="ReplaceWithFirstOrDefault.2">
    <priority>MINOR</priority>
    <name><![CDATA[Replace with FirstOrDefault($args$): Replace with FirstOrDefault($args$)]]></name>
    <description><![CDATA[Replace with FirstOrDefault($args$): Replace with FirstOrDefault($args$)]]></description>
  </rule>
  <rule key="ReplaceWithFirstOrDefault.3">
    <priority>MINOR</priority>
    <name><![CDATA[Replace with FirstOrDefault($args$): Replace with FirstOrDefault($args$)]]></name>
    <description><![CDATA[Replace with FirstOrDefault($args$): Replace with FirstOrDefault($args$)]]></description>
  </rule>
  <rule key="ReplaceWithFirstOrDefault.4">
    <priority>MINOR</priority>
    <name><![CDATA[Replace with FirstOrDefault($args$): Replace with FirstOrDefault($args$)]]></name>
    <description><![CDATA[Replace with FirstOrDefault($args$): Replace with FirstOrDefault($args$)]]></description>
  </rule>
  <rule key="ReplaceWithLastOrDefault.1">
    <priority>MINOR</priority>
    <name><![CDATA[Replace with LastOrDefault($args$): Replace with LastOrDefault($args$)]]></name>
    <description><![CDATA[Replace with LastOrDefault($args$): Replace with LastOrDefault($args$)]]></description>
  </rule>
  <rule key="ReplaceWithLastOrDefault.2">
    <priority>MINOR</priority>
    <name><![CDATA[Replace with LastOrDefault($args$): Replace with LastOrDefault($args$)]]></name>
    <description><![CDATA[Replace with LastOrDefault($args$): Replace with LastOrDefault($args$)]]></description>
  </rule>
  <rule key="ReplaceWithLastOrDefault.3">
    <priority>MINOR</priority>
    <name><![CDATA[Replace with LastOrDefault($args$): Replace with LastOrDefault($args$)]]></name>
    <description><![CDATA[Replace with LastOrDefault($args$): Replace with LastOrDefault($args$)]]></description>
  </rule>
  <rule key="ReplaceWithLastOrDefault.4">
    <priority>MINOR</priority>
    <name><![CDATA[Replace with LastOrDefault($args$): Replace with LastOrDefault($args$)]]></name>
    <description><![CDATA[Replace with LastOrDefault($args$): Replace with LastOrDefault($args$)]]></description>
  </rule>
  <rule key="ReplaceWithOfType.1">
    <priority>MINOR</priority>
    <name><![CDATA[Replace with OfType<T>(): Replace with OfType<T>()]]></name>
    <description><![CDATA[Replace with OfType<T>(): Replace with OfType<T>()]]></description>
  </rule>
  <rule key="ReplaceWithOfType.2">
    <priority>MINOR</priority>
    <name><![CDATA[Replace with OfType<T>(): Replace with OfType<T>()]]></name>
    <description><![CDATA[Replace with OfType<T>(): Replace with OfType<T>()]]></description>
  </rule>
  <rule key="ReplaceWithOfType.3">
    <priority>MINOR</priority>
    <name><![CDATA[Replace with OfType<T>(): Replace with OfType<T>()]]></name>
    <description><![CDATA[Replace with OfType<T>(): Replace with OfType<T>()]]></description>
  </rule>
  <rule key="ReplaceWithOfType.Any.1">
    <priority>MINOR</priority>
    <name><![CDATA[Replace with OfType<T>().Any(): Replace with OfType<T>().Any()]]></name>
    <description><![CDATA[Replace with OfType<T>().Any(): Replace with OfType<T>().Any()]]></description>
  </rule>
  <rule key="ReplaceWithOfType.Any.2">
    <priority>MINOR</priority>
    <name><![CDATA[Replace with OfType<T>().Any(): Replace with OfType<T>().Any(..)]]></name>
    <description><![CDATA[Replace with OfType<T>().Any(): Replace with OfType<T>().Any(..)]]></description>
  </rule>
  <rule key="ReplaceWithOfType.Count.1">
    <priority>MINOR</priority>
    <name><![CDATA[Replace with OfType<T>().Count(): Replace with OfType<T>().Count()]]></name>
    <description><![CDATA[Replace with OfType<T>().Count(): Replace with OfType<T>().Count()]]></description>
  </rule>
  <rule key="ReplaceWithOfType.Count.2">
    <priority>MINOR</priority>
    <name><![CDATA[Replace with OfType<T>().Count(): Replace with OfType<T>().Count(..)]]></name>
    <description><![CDATA[Replace with OfType<T>().Count(): Replace with OfType<T>().Count(..)]]></description>
  </rule>
  <rule key="ReplaceWithOfType.First.1">
    <priority>MINOR</priority>
    <name><![CDATA[Replace with OfType<T>().First(): Replace with OfType<T>().First()]]></name>
    <description><![CDATA[Replace with OfType<T>().First(): Replace with OfType<T>().First()]]></description>
  </rule>
  <rule key="ReplaceWithOfType.First.2">
    <priority>MINOR</priority>
    <name><![CDATA[Replace with OfType<T>().First(): Replace with OfType<T>().First(..)]]></name>
    <description><![CDATA[Replace with OfType<T>().First(): Replace with OfType<T>().First(..)]]></description>
  </rule>
  <rule key="ReplaceWithOfType.FirstOrDefault.1">
    <priority>MINOR</priority>
    <name><![CDATA[Replace with OfType<T>().FirstOrDefault(): Replace with OfType<T>().FirstOrDefault()]]></name>
    <description><![CDATA[Replace with OfType<T>().FirstOrDefault(): Replace with OfType<T>().FirstOrDefault()]]></description>
  </rule>
  <rule key="ReplaceWithOfType.FirstOrDefault.2">
    <priority>MINOR</priority>
    <name><![CDATA[Replace with OfType<T>().FirstOrDefault(): Replace with OfType<T>().FirstOrDefault(..)]]></name>
    <description><![CDATA[Replace with OfType<T>().FirstOrDefault(): Replace with OfType<T>().FirstOrDefault(..)]]></description>
  </rule>
  <rule key="ReplaceWithOfType.Last.1">
    <priority>MINOR</priority>
    <name><![CDATA[Replace with OfType<T>().Last(): Replace with OfType<T>().Last()]]></name>
    <description><![CDATA[Replace with OfType<T>().Last(): Replace with OfType<T>().Last()]]></description>
  </rule>
  <rule key="ReplaceWithOfType.Last.2">
    <priority>MINOR</priority>
    <name><![CDATA[Replace with OfType<T>().Last(): Replace with OfType<T>().Last(..)]]></name>
    <description><![CDATA[Replace with OfType<T>().Last(): Replace with OfType<T>().Last(..)]]></description>
  </rule>
  <rule key="ReplaceWithOfType.LastOrDefault.1">
    <priority>MINOR</priority>
    <name><![CDATA[Replace with OfType<T>().LastOrDefault(): Replace with OfType<T>().LastOrDefault()]]></name>
    <description><![CDATA[Replace with OfType<T>().LastOrDefault(): Replace with OfType<T>().LastOrDefault()]]></description>
  </rule>
  <rule key="ReplaceWithOfType.LastOrDefault.2">
    <priority>MINOR</priority>
    <name><![CDATA[Replace with OfType<T>().LastOrDefault(): Replace with OfType<T>().LastOrDefault(..)]]></name>
    <description><![CDATA[Replace with OfType<T>().LastOrDefault(): Replace with OfType<T>().LastOrDefault(..)]]></description>
  </rule>
  <rule key="ReplaceWithOfType.LongCount">
    <priority>MINOR</priority>
    <name><![CDATA[Replace with OfType<T>().LongCount(): Replace with OfType<T>().LongCount()]]></name>
    <description><![CDATA[Replace with OfType<T>().LongCount(): Replace with OfType<T>().LongCount()]]></description>
  </rule>
  <rule key="ReplaceWithOfType.Single.1">
    <priority>MINOR</priority>
    <name><![CDATA[Replace with OfType<T>().Single(): Replace with OfType<T>().Single()]]></name>
    <description><![CDATA[Replace with OfType<T>().Single(): Replace with OfType<T>().Single()]]></description>
  </rule>
  <rule key="ReplaceWithOfType.Single.2">
    <priority>MINOR</priority>
    <name><![CDATA[Replace with OfType<T>().Single(): Replace with OfType<T>().Single(..)]]></name>
    <description><![CDATA[Replace with OfType<T>().Single(): Replace with OfType<T>().Single(..)]]></description>
  </rule>
  <rule key="ReplaceWithOfType.SingleOrDefault.1">
    <priority>MINOR</priority>
    <name><![CDATA[Replace with OfType<T>().SingleOrDefault(): Replace with OfType<T>().SingleOrDefault()]]></name>
    <description><![CDATA[Replace with OfType<T>().SingleOrDefault(): Replace with OfType<T>().SingleOrDefault()]]></description>
  </rule>
  <rule key="ReplaceWithOfType.SingleOrDefault.2">
    <priority>MINOR</priority>
    <name><![CDATA[Replace with OfType<T>().SingleOrDefault(): Replace with OfType<T>().SingleOrDefault(..)]]></name>
    <description><![CDATA[Replace with OfType<T>().SingleOrDefault(): Replace with OfType<T>().SingleOrDefault(..)]]></description>
  </rule>
  <rule key="ReplaceWithOfType.Where">
    <priority>MINOR</priority>
    <name><![CDATA[Replace with OfType<T>().Where(): Replace with OfType<T>().Where(..)]]></name>
    <description><![CDATA[Replace with OfType<T>().Where(): Replace with OfType<T>().Where(..)]]></description>
  </rule>
  <rule key="ReplaceWithSimpleAssignment.False">
    <priority>MINOR</priority>
    <name><![CDATA[Replace with simple assignment: Replace with simple assignment]]></name>
    <description><![CDATA[Replace with simple assignment: Replace with simple assignment]]></description>
  </rule>
  <rule key="ReplaceWithSimpleAssignment.True">
    <priority>MINOR</priority>
    <name><![CDATA[Replace with simple assignment: Replace with simple assignment]]></name>
    <description><![CDATA[Replace with simple assignment: Replace with simple assignment]]></description>
  </rule>
  <rule key="ReplaceWithSingleAssignment.False">
    <priority>MINOR</priority>
    <name><![CDATA[Replace with single assignment: Replace with single assignment]]></name>
    <description><![CDATA[Replace with single assignment: Replace with single assignment]]></description>
  </rule>
  <rule key="ReplaceWithSingleAssignment.True">
    <priority>MINOR</priority>
    <name><![CDATA[Replace with single assignment: Replace with single assignment]]></name>
    <description><![CDATA[Replace with single assignment: Replace with single assignment]]></description>
  </rule>
  <rule key="ReplaceWithSingleCallToAny">
    <priority>MINOR</priority>
    <name><![CDATA[Replace with single call to Any(..): Replace with single call to Any(..)]]></name>
    <description><![CDATA[Replace with single call to Any(..): Replace with single call to Any(..)]]></description>
  </rule>
  <rule key="ReplaceWithSingleCallToCount">
    <priority>MINOR</priority>
    <name><![CDATA[Replace with single call to Count(..): Replace with single call to Count(..)]]></name>
    <description><![CDATA[Replace with single call to Count(..): Replace with single call to Count(..)]]></description>
  </rule>
  <rule key="ReplaceWithSingleCallToFirst">
    <priority>MINOR</priority>
    <name><![CDATA[Replace with single call to First(..): Replace with single call to First(..)]]></name>
    <description><![CDATA[Replace with single call to First(..): Replace with single call to First(..)]]></description>
  </rule>
  <rule key="ReplaceWithSingleCallToFirstOrDefault">
    <priority>MINOR</priority>
    <name><![CDATA[Replace with single call to FirstOrDefault(..): Replace with single call to FirstOrDefault(..)]]></name>
    <description><![CDATA[Replace with single call to FirstOrDefault(..): Replace with single call to FirstOrDefault(..)]]></description>
  </rule>
  <rule key="ReplaceWithSingleCallToLast">
    <priority>MINOR</priority>
    <name><![CDATA[Replace with single call to Last(..): Replace with single call to Last(..)]]></name>
    <description><![CDATA[Replace with single call to Last(..): Replace with single call to Last(..)]]></description>
  </rule>
  <rule key="ReplaceWithSingleCallToLastOrDefault">
    <priority>MINOR</priority>
    <name><![CDATA[Replace with single call to LastOrDefault(..): Replace with single call to LastOrDefault(..)]]></name>
    <description><![CDATA[Replace with single call to LastOrDefault(..): Replace with single call to LastOrDefault(..)]]></description>
  </rule>
  <rule key="ReplaceWithSingleCallToSingle">
    <priority>MINOR</priority>
    <name><![CDATA[Replace with single call to Single(..): Replace with single call to Single(..)]]></name>
    <description><![CDATA[Replace with single call to Single(..): Replace with single call to Single(..)]]></description>
  </rule>
  <rule key="ReplaceWithSingleCallToSingleOrDefault">
    <priority>MINOR</priority>
    <name><![CDATA[Replace with single call to SingleOrDefault(..): Replace with single call to SingleOrDefault(..)]]></name>
    <description><![CDATA[Replace with single call to SingleOrDefault(..): Replace with single call to SingleOrDefault(..)]]></description>
  </rule>
  <rule key="ReplaceWithSingleOrDefault.1">
    <priority>MINOR</priority>
    <name><![CDATA[Replace with SingleOrDefault($args$): Replace with SingleOrDefault($args$)]]></name>
    <description><![CDATA[Replace with SingleOrDefault($args$): Replace with SingleOrDefault($args$)]]></description>
  </rule>
  <rule key="ReplaceWithSingleOrDefault.2">
    <priority>MINOR</priority>
    <name><![CDATA[Replace with SingleOrDefault($args$): Replace with SingleOrDefault($args$)]]></name>
    <description><![CDATA[Replace with SingleOrDefault($args$): Replace with SingleOrDefault($args$)]]></description>
  </rule>
  <rule key="ReplaceWithSingleOrDefault.3">
    <priority>MINOR</priority>
    <name><![CDATA[Replace with SingleOrDefault($args$): Replace with SingleOrDefault($args$)]]></name>
    <description><![CDATA[Replace with SingleOrDefault($args$): Replace with SingleOrDefault($args$)]]></description>
  </rule>
  <rule key="ReplaceWithSingleOrDefault.4">
    <priority>MINOR</priority>
    <name><![CDATA[Replace with SingleOrDefault($args$): Replace with SingleOrDefault($args$)]]></name>
    <description><![CDATA[Replace with SingleOrDefault($args$): Replace with SingleOrDefault($args$)]]></description>
  </rule>
  <rule key="ReplaceWithStringIsNullOrEmpty">
    <priority>MINOR</priority>
    <name><![CDATA[Use 'String.IsNullOrEmpty']]></name>
    <description><![CDATA[<h2>JetBrains Code Inspection Wiki</h2> <p><a href="http://confluence.jetbrains.net/display/ReSharper/Use+'String.IsNullOrEmpty'">See
      JetBrains documentation.</a></p>]]></description>
  </rule>
  <rule key="RequiredBaseTypesConflict">
    <priority>MAJOR</priority>
    <name><![CDATA[Required base type conflicting another type]]></name>
    <description><![CDATA[Required base type conflicting another type]]></description>
  </rule>
  <rule key="RequiredBaseTypesDirectConflict">
    <priority>MAJOR</priority>
    <name><![CDATA[Type specified in '[BaseTypeRequired]' attribute conflicts another type]]></name>
    <description><![CDATA[Type specified in '[BaseTypeRequired]' attribute conflicts another type]]></description>
  </rule>
  <rule key="RequiredBaseTypesIsNotInherited">
    <priority>MAJOR</priority>
    <name><![CDATA[Base type is required]]></name>
    <description><![CDATA[Base type is required]]></description>
  </rule>
  <rule key="ResourceItemNotResolved">
    <priority>BLOCKER</priority>
    <name><![CDATA[Cannot resolve resource item]]></name>
    <description><![CDATA[Cannot resolve resource item]]></description>
  </rule>
  <rule key="ResourceNotResolved">
    <priority>BLOCKER</priority>
    <name><![CDATA[Cannot resolve resource]]></name>
    <description><![CDATA[Cannot resolve resource]]></description>
  </rule>
  <rule key="ReturnTypeCanBeEnumerable.Global">
    <priority>INFO</priority>
    <name><![CDATA[Return type can be IEnumerable<T>: Non-private accessibility]]></name>
    <description><![CDATA[Return type can be IEnumerable<T>: Non-private accessibility]]></description>
  </rule>
  <rule key="ReturnTypeCanBeEnumerable.Local">
    <priority>INFO</priority>
    <name><![CDATA[Return type can be IEnumerable<T>: Private accessibility]]></name>
    <description><![CDATA[Return type can be IEnumerable<T>: Private accessibility]]></description>
  </rule>
  <rule key="ReturnValueOfPureMethodIsNotUsed">
    <priority>MAJOR</priority>
    <name><![CDATA[Return value of pure method is not used]]></name>
    <description><![CDATA[<h2>JetBrains Code Inspection Wiki</h2> <p><a href="http://confluence.jetbrains.net/display/ReSharper/Return+value+of+pure+method+is+not+used">See
      JetBrains documentation.</a></p>]]></description>
  </rule>
  <rule key="SealedMemberInSealedClass">
    <priority>MAJOR</priority>
    <name><![CDATA[Sealed member in sealed class]]></name>
    <description><![CDATA[<h2>JetBrains Code Inspection Wiki</h2> <p><a href="http://confluence.jetbrains.net/display/ReSharper/Sealed+member+in+sealed+class">See
      JetBrains documentation.</a></p>]]></description>
  </rule>
  <rule key="SimilarAnonymousTypeNearby">
    <priority>INFO</priority>
    <name><![CDATA[Similar anonymous type detected nearby]]></name>
    <description><![CDATA[Similar anonymous type detected nearby]]></description>
  </rule>
  <rule key="SimplifyConditionalTernaryExpression">
    <priority>MINOR</priority>
    <name><![CDATA[Simplify conditional ternary expression]]></name>
    <description><![CDATA[<h2>JetBrains Code Inspection Wiki</h2> <p><a href="http://confluence.jetbrains.net/display/ReSharper/Simplify+conditional+ternary+expression">See
      JetBrains documentation.</a></p>]]></description>
  </rule>
  <rule key="SimplifyLinqExpression">
    <priority>MINOR</priority>
    <name><![CDATA[Simplify LINQ expression]]></name>
    <description><![CDATA[Simplify LINQ expression]]></description>
  </rule>
  <rule key="SpecifyACultureInStringConversionExplicitly">
    <priority>MAJOR</priority>
    <name><![CDATA[Specify string culture explicitly]]></name>
    <description><![CDATA[<h2>JetBrains Code Inspection Wiki</h2> <p><a href="http://confluence.jetbrains.net/display/ReSharper/Specify+a+culture+in+string+conversion+explicitly">See
      JetBrains documentation.</a></p>]]></description>
  </rule>
  <rule key="SpecifyStringComparison">
    <priority>INFO</priority>
    <name><![CDATA[Specify string comparison explicitly]]></name>
    <description><![CDATA[Specify string comparison explicitly]]></description>
  </rule>
  <rule key="StaticMemberInGenericType">
    <priority>MAJOR</priority>
    <name><![CDATA[Static field or auto-property in generic type]]></name>
    <description><![CDATA[Static field or auto-property in generic type]]></description>
  </rule>
  <rule key="StaticMemberInitializerReferesToMemberBelow">
    <priority>MAJOR</priority>
    <name><![CDATA[Static member initializer refers to static member below or in other part]]></name>
    <description><![CDATA[Static member initializer refers to static member below or in other part]]></description>
  </rule>
  <rule key="StringCompareIsCultureSpecific.1">
    <priority>MAJOR</priority>
    <name><![CDATA[String.Compare is culture-specific: String.Compare(string, string) is culture-specific]]></name>
    <description><![CDATA[String.Compare is culture-specific: String.Compare(string, string) is culture-specific]]></description>
  </rule>
  <rule key="StringCompareIsCultureSpecific.2">
    <priority>MAJOR</priority>
    <name><![CDATA[String.Compare is culture-specific: String.Compare(string, string, bool) is culture-specific]]></name>
    <description><![CDATA[String.Compare is culture-specific: String.Compare(string, string, bool) is culture-specific]]></description>
  </rule>
  <rule key="StringCompareIsCultureSpecific.3">
    <priority>MAJOR</priority>
    <name><![CDATA[String.Compare is culture-specific: String.Compare(string, string, bool) is culture-specific]]></name>
    <description><![CDATA[String.Compare is culture-specific: String.Compare(string, string, bool) is culture-specific]]></description>
  </rule>
  <rule key="StringCompareIsCultureSpecific.4">
    <priority>MAJOR</priority>
    <name><![CDATA[String.Compare is culture-specific: String.Compare(string, int, string, int) is culture-specific]]></name>
    <description><![CDATA[String.Compare is culture-specific: String.Compare(string, int, string, int) is culture-specific]]></description>
  </rule>
  <rule key="StringCompareIsCultureSpecific.5">
    <priority>MAJOR</priority>
    <name><![CDATA[String.Compare is culture-specific: String.Compare(string, int, string, int, bool) is culture-specific]]></name>
    <description><![CDATA[String.Compare is culture-specific: String.Compare(string, int, string, int, bool) is culture-specific]]></description>
  </rule>
  <rule key="StringCompareIsCultureSpecific.6">
    <priority>MAJOR</priority>
    <name><![CDATA[String.Compare is culture-specific: String.Compare(string, int, string, int, bool) is culture-specific]]></name>
    <description><![CDATA[String.Compare is culture-specific: String.Compare(string, int, string, int, bool) is culture-specific]]></description>
  </rule>
  <rule key="StringCompareToIsCultureSpecific">
    <priority>MAJOR</priority>
    <name><![CDATA[String.CompareTo is culture-specific: String.CompareTo is culture-specific]]></name>
    <description><![CDATA[String.CompareTo is culture-specific: String.CompareTo is culture-specific]]></description>
  </rule>
  <rule key="StringEndsWithIsCultureSpecific">
    <priority>INFO</priority>
    <name><![CDATA[String.EndsWith is culture-specific: String.EndsWith(string) is culture-specific]]></name>
    <description><![CDATA[String.EndsWith is culture-specific: String.EndsWith(string) is culture-specific]]></description>
  </rule>
  <rule key="StringIndexOfIsCultureSpecific.1">
    <priority>MAJOR</priority>
    <name><![CDATA[String.IndexOf is culture-specific: String.IndexOf(string) is culture-specific]]></name>
    <description><![CDATA[String.IndexOf is culture-specific: String.IndexOf(string) is culture-specific]]></description>
  </rule>
  <rule key="StringIndexOfIsCultureSpecific.2">
    <priority>MAJOR</priority>
    <name><![CDATA[String.IndexOf is culture-specific: String.IndexOf(string, int) is culture-specific]]></name>
    <description><![CDATA[String.IndexOf is culture-specific: String.IndexOf(string, int) is culture-specific]]></description>
  </rule>
  <rule key="StringIndexOfIsCultureSpecific.3">
    <priority>MAJOR</priority>
    <name><![CDATA[String.IndexOf is culture-specific: String.IndexOf(string, int) is culture-specific]]></name>
    <description><![CDATA[String.IndexOf is culture-specific: String.IndexOf(string, int) is culture-specific]]></description>
  </rule>
  <rule key="StringLastIndexOfIsCultureSpecific.1">
    <priority>MAJOR</priority>
    <name><![CDATA[String.LastIndexOf is culture-specific: String.LastIndexOf(string) is culture-specific]]></name>
    <description><![CDATA[String.LastIndexOf is culture-specific: String.LastIndexOf(string) is culture-specific]]></description>
  </rule>
  <rule key="StringLastIndexOfIsCultureSpecific.2">
    <priority>MAJOR</priority>
    <name><![CDATA[String.LastIndexOf is culture-specific: String.LastIndexOf(string, int) is culture-specific]]></name>
    <description><![CDATA[String.LastIndexOf is culture-specific: String.LastIndexOf(string, int) is culture-specific]]></description>
  </rule>
  <rule key="StringLastIndexOfIsCultureSpecific.3">
    <priority>MAJOR</priority>
    <name><![CDATA[String.LastIndexOf is culture-specific: String.LastIndexOf(string, int) is culture-specific]]></name>
    <description><![CDATA[String.LastIndexOf is culture-specific: String.LastIndexOf(string, int) is culture-specific]]></description>
  </rule>
  <rule key="StringStartsWithIsCultureSpecific">
    <priority>INFO</priority>
    <name><![CDATA[String.StartsWith is culture-specific: String.StartsWith(string) is culture-specific]]></name>
    <description><![CDATA[String.StartsWith is culture-specific: String.StartsWith(string) is culture-specific]]></description>
  </rule>
  <rule key="SuggestBaseTypeForParameter">
    <priority>INFO</priority>
    <name><![CDATA[Parameter can be declared with base type]]></name>
    <description><![CDATA[Parameter can be declared with base type]]></description>
  </rule>
  <rule key="SuggestVarOrType_BuiltInTypes">
    <priority>INFO</priority>
    <name><![CDATA[Use preferred 'var' style: For built-in types]]></name>
    <description><![CDATA[Use preferred 'var' style: For built-in types]]></description>
  </rule>
  <rule key="SuggestVarOrType_Elsewhere">
    <priority>INFO</priority>
    <name><![CDATA[Use preferred 'var' style: Elsewhere]]></name>
    <description><![CDATA[Use preferred 'var' style: Elsewhere]]></description>
  </rule>
  <rule key="SuggestVarOrType_SimpleTypes">
    <priority>INFO</priority>
    <name><![CDATA[Use preferred 'var' style: When type is simple]]></name>
    <description><![CDATA[Use preferred 'var' style: When type is simple]]></description>
  </rule>
  <rule key="SuspiciousTypeConversion.Global">
    <priority>MAJOR</priority>
    <name><![CDATA[Suspicious type conversion or check]]></name>
    <description><![CDATA[Suspicious type conversion or check]]></description>
  </rule>
  <rule key="TailRecursiveCall">
    <priority>INFO</priority>
    <name><![CDATA[Tail recursive call may be replaced with loop]]></name>
    <description><![CDATA[Tail recursive call may be replaced with loop]]></description>
  </rule>
  <rule key="ThreadStaticAtInstanceField">
    <priority>MAJOR</priority>
    <name><![CDATA[[ThreadStatic] doesn't work with instance fields]]></name>
    <description><![CDATA[<h2>JetBrains Code Inspection Wiki</h2> <p><a href="http://confluence.jetbrains.net/display/ReSharper/%27ThreadStaticAttribute%27+usage">See
      JetBrains documentation.</a></p>]]></description>
  </rule>
  <rule key="ThreadStaticFieldHasInitializer">
    <priority>MAJOR</priority>
    <name><![CDATA[Thread static field has initializer]]></name>
    <description><![CDATA[<h2>JetBrains Code Inspection Wiki</h2> <p><a href="http://confluence.jetbrains.net/display/ReSharper/%27ThreadStaticAttribute%27+usage">See
      JetBrains documentation.</a></p>]]></description>
  </rule>
  <rule key="TooWideLocalVariableScope">
    <priority>MINOR</priority>
    <name><![CDATA[Local variable has too wide declaration scope]]></name>
    <description><![CDATA[Local variable has too wide declaration scope]]></description>
  </rule>
  <rule key="TryCastAlwaysSucceeds">
    <priority>MINOR</priority>
    <name><![CDATA[Safe cast expression always succeeds]]></name>
    <description><![CDATA[Safe cast expression always succeeds]]></description>
  </rule>
  <rule key="TryCastAndCheckForNull.0">
    <priority>MAJOR</priority>
    <name><![CDATA[Try cast and check for null may be replaced with type check: Try cast and check for null may be replaced with type check]]></name>
    <description><![CDATA[Try cast and check for null may be replaced with type check: Try cast and check for null may be replaced with type check]]></description>
  </rule>
  <rule key="TryCastAndCheckForNull.1">
    <priority>MAJOR</priority>
    <name><![CDATA[Try cast and check for null may be replaced with type check: Try cast and check for null may be replaced with type check]]></name>
    <description><![CDATA[Try cast and check for null may be replaced with type check: Try cast and check for null may be replaced with type check]]></description>
  </rule>
  <rule key="TryStatementsCanBeMerged">
    <priority>INFO</priority>
    <name><![CDATA[try-catch and try-finally statements can be merged]]></name>
    <description><![CDATA[try-catch and try-finally statements can be merged]]></description>
  </rule>
  <rule key="TypeParameterCanBeVariant">
    <priority>MINOR</priority>
    <name><![CDATA[Type parameter could be declared as covariant or contravariant]]></name>
    <description><![CDATA[Type parameter could be declared as covariant or contravariant]]></description>
  </rule>
  <rule key="UnassignedField.Compiler">
    <priority>MAJOR</priority>
    <name><![CDATA[Unassigned field]]></name>
    <description><![CDATA[Unassigned field]]></description>
  </rule>
  <rule key="UnassignedField.Global">
    <priority>MINOR</priority>
    <name><![CDATA[Unassigned field: Non-private accessibility]]></name>
    <description><![CDATA[Unassigned field: Non-private accessibility]]></description>
  </rule>
  <rule key="UnassignedField.Local">
    <priority>MAJOR</priority>
    <name><![CDATA[Unassigned field: Private accessibility]]></name>
    <description><![CDATA[Unassigned field: Private accessibility]]></description>
  </rule>
  <rule key="UnassignedGetOnlyAutoProperty">
    <priority>MAJOR</priority>
    <name><![CDATA[Get-only auto-property is never assigned]]></name>
    <description><![CDATA[Get-only auto-property is never assigned]]></description>
  </rule>
  <rule key="UnassignedReadonlyField">
    <priority>MAJOR</priority>
    <name><![CDATA[Unassigned readonly field]]></name>
    <description><![CDATA[Unassigned readonly field]]></description>
  </rule>
  <rule key="UnassignedReadonlyField.Compiler">
    <priority>MAJOR</priority>
    <name><![CDATA[Unassigned readonly field]]></name>
    <description><![CDATA[Unassigned readonly field]]></description>
  </rule>
  <rule key="UnnecessaryWhitespace">
    <priority>INFO</priority>
    <name><![CDATA[Unnecessary whitespace at the end of line]]></name>
    <description><![CDATA[Unnecessary whitespace at the end of line]]></description>
  </rule>
  <rule key="UnreachableCode">
    <priority>MAJOR</priority>
    <name><![CDATA[Unreachable code detected]]></name>
    <description><![CDATA[Unreachable code detected]]></description>
  </rule>
  <rule key="UnsupportedRequiredBaseType">
    <priority>MAJOR</priority>
    <name><![CDATA[BaseTypeRequired attribute supports only classes and interfaces]]></name>
    <description><![CDATA[<h2>JetBrains Code Inspection Wiki</h2> <p><a href="http://confluence.jetbrains.net/display/ReSharper/BaseTypeRequired+attribute+supports+only+classes+and+interfaces">See
      JetBrains documentation.</a></p>]]></description>
  </rule>
  <rule key="UnusedAnonymousMethodSignature">
    <priority>MAJOR</priority>
    <name><![CDATA[Anonymous method signature is not necessary]]></name>
    <description><![CDATA[Anonymous method signature is not necessary]]></description>
  </rule>
  <rule key="UnusedAutoPropertyAccessor.Global">
    <priority>MAJOR</priority>
    <name><![CDATA[Auto-property accessor is never used: Non-private accessibility]]></name>
    <description><![CDATA[Auto-property accessor is never used: Non-private accessibility]]></description>
  </rule>
  <rule key="UnusedAutoPropertyAccessor.Local">
    <priority>MAJOR</priority>
    <name><![CDATA[Auto-property accessor is never used: Private accessibility]]></name>
    <description><![CDATA[Auto-property accessor is never used: Private accessibility]]></description>
  </rule>
  <rule key="UnusedField.Compiler">
    <priority>MAJOR</priority>
    <name><![CDATA[Field is never used]]></name>
    <description><![CDATA[Field is never used]]></description>
  </rule>
  <rule key="UnusedLabel">
    <priority>MAJOR</priority>
    <name><![CDATA[Unused label]]></name>
    <description><![CDATA[Unused label]]></description>
  </rule>
  <rule key="UnusedMember.Global">
    <priority>MINOR</priority>
    <name><![CDATA[Type or member is never used: Non-private accessibility]]></name>
    <description><![CDATA[Type or member is never used: Non-private accessibility]]></description>
  </rule>
  <rule key="UnusedMember.Local">
    <priority>MAJOR</priority>
    <name><![CDATA[Type or member is never used: Private accessibility]]></name>
    <description><![CDATA[Type or member is never used: Private accessibility]]></description>
  </rule>
  <rule key="UnusedMemberHiearchy.Global">
    <priority>MINOR</priority>
    <name><![CDATA[Type member is only used in overrides: Non-private accessibility]]></name>
    <description><![CDATA[Type member is only used in overrides: Non-private accessibility]]></description>
  </rule>
  <rule key="UnusedMemberHiearchy.Local">
    <priority>MAJOR</priority>
    <name><![CDATA[Type member is only used in overrides: Private accessibility]]></name>
    <description><![CDATA[Type member is only used in overrides: Private accessibility]]></description>
  </rule>
  <rule key="UnusedMemberInSuper.Global">
    <priority>MINOR</priority>
    <name><![CDATA[Type member is never accessed via base type: Non-private accessibility]]></name>
    <description><![CDATA[Type member is never accessed via base type: Non-private accessibility]]></description>
  </rule>
  <rule key="UnusedMemberInSuper.Local">
    <priority>MAJOR</priority>
    <name><![CDATA[Type member is never accessed via base type: Private accessibility]]></name>
    <description><![CDATA[Type member is never accessed via base type: Private accessibility]]></description>
  </rule>
  <rule key="UnusedMethodReturnValue.Global">
    <priority>MINOR</priority>
    <name><![CDATA[Method return value is never used: Non-private accessibility]]></name>
    <description><![CDATA[Method return value is never used: Non-private accessibility]]></description>
  </rule>
  <rule key="UnusedMethodReturnValue.Local">
    <priority>MAJOR</priority>
    <name><![CDATA[Method return value is never used: Private accessibility]]></name>
    <description><![CDATA[Method return value is never used: Private accessibility]]></description>
  </rule>
  <rule key="UnusedParameter.Global">
    <priority>MINOR</priority>
    <name><![CDATA[Unused parameter: Non-private accessibility]]></name>
    <description><![CDATA[Unused parameter: Non-private accessibility]]></description>
  </rule>
  <rule key="UnusedParameter.Local">
    <priority>MAJOR</priority>
    <name><![CDATA[Unused parameter: Private accessibility]]></name>
    <description><![CDATA[Unused parameter: Private accessibility]]></description>
  </rule>
  <rule key="UnusedTypeParameter">
    <priority>MAJOR</priority>
    <name><![CDATA[Unused type parameter]]></name>
    <description><![CDATA[Unused type parameter]]></description>
  </rule>
  <rule key="UnusedVariable">
    <priority>MAJOR</priority>
    <name><![CDATA[Unused local variable]]></name>
    <description><![CDATA[Unused local variable]]></description>
  </rule>
  <rule key="UnusedVariable.Compiler">
    <priority>MAJOR</priority>
    <name><![CDATA[Unused local variable]]></name>
    <description><![CDATA[Unused local variable]]></description>
  </rule>
  <rule key="UseArrayCreationExpression.1">
    <priority>MINOR</priority>
    <name><![CDATA[Use array creation expression: Use array creation expression]]></name>
    <description><![CDATA[Use array creation expression: Use array creation expression]]></description>
  </rule>
  <rule key="UseArrayCreationExpression.2">
    <priority>MINOR</priority>
    <name><![CDATA[Use array creation expression: Use array creation expression]]></name>
    <description><![CDATA[Use array creation expression: Use array creation expression]]></description>
  </rule>
  <rule key="UseIndexedProperty">
    <priority>MINOR</priority>
    <name><![CDATA[Use indexed property]]></name>
    <description><![CDATA[Use indexed property]]></description>
  </rule>
  <rule key="UseIsOperator.1">
    <priority>MINOR</priority>
    <name><![CDATA[Use 'is' operator: Use 'is' operator]]></name>
    <description><![CDATA[Use 'is' operator: Use 'is' operator]]></description>
  </rule>
  <rule key="UseIsOperator.2">
    <priority>MINOR</priority>
    <name><![CDATA[Use 'is' operator: Use 'is' operator]]></name>
    <description><![CDATA[Use 'is' operator: Use 'is' operator]]></description>
  </rule>
  <rule key="UseMemberInitializer">
    <priority>INFO</priority>
    <name><![CDATA[Use member initializer instead of assignment]]></name>
    <description><![CDATA[Use member initializer instead of assignment]]></description>
  </rule>
  <rule key="UseMethodAny.0">
    <priority>MINOR</priority>
    <name><![CDATA[Use method Any(): Use method Any()]]></name>
    <description><![CDATA[<h2>JetBrains Code Inspection Wiki</h2> <p><a href="http://confluence.jetbrains.com/display/ReSharper/Use+method+Any%28%29">See
      JetBrains documentation.</a></p>]]></description>
  </rule>
  <rule key="UseMethodAny.1">
    <priority>MINOR</priority>
    <name><![CDATA[Use method Any(): Use method Any()]]></name>
    <description><![CDATA[Use method Any(): Use method Any()]]></description>
  </rule>
  <rule key="UseMethodAny.2">
    <priority>MINOR</priority>
    <name><![CDATA[Use method Any(): Use method Any()]]></name>
    <description><![CDATA[Use method Any(): Use method Any()]]></description>
  </rule>
  <rule key="UseMethodAny.3">
    <priority>MINOR</priority>
    <name><![CDATA[Use method Any(): Use method Any()]]></name>
    <description><![CDATA[Use method Any(): Use method Any()]]></description>
  </rule>
  <rule key="UseMethodAny.4">
    <priority>MINOR</priority>
    <name><![CDATA[Use method Any(): Use method Any()]]></name>
    <description><![CDATA[Use method Any(): Use method Any()]]></description>
  </rule>
  <rule key="UseMethodIsInstanceOfType">
    <priority>MINOR</priority>
    <name><![CDATA[Use method IsInstanceOfType(..): Use method IsInstanceOfType(..)]]></name>
    <description><![CDATA[Use method IsInstanceOfType(..): Use method IsInstanceOfType(..)]]></description>
  </rule>
  <rule key="UseNameofExpression">
    <priority>MINOR</priority>
    <name><![CDATA[Use 'nameof' expression to reference name]]></name>
    <description><![CDATA[Use 'nameof' expression to reference name]]></description>
  </rule>
  <rule key="UseNullPropagation">
    <priority>MINOR</priority>
    <name><![CDATA[Replace if statement with null-propagating code]]></name>
    <description><![CDATA[Replace if statement with null-propagating code]]></description>
  </rule>
  <rule key="UseObjectOrCollectionInitializer">
    <priority>MINOR</priority>
    <name><![CDATA[Use object or collection initializer when possible]]></name>
    <description><![CDATA[Use object or collection initializer when possible]]></description>
  </rule>
  <rule key="UseStringInterpolation">
    <priority>MINOR</priority>
    <name><![CDATA[Use string interpolation expression]]></name>
    <description><![CDATA[Use string interpolation expression]]></description>
  </rule>
  <rule key="ValueParameterNotUsed">
    <priority>MAJOR</priority>
    <name><![CDATA['value' parameter is not used]]></name>
    <description><![CDATA[<h2>JetBrains Code Inspection Wiki</h2> <p><a href="http://confluence.jetbrains.net/display/ReSharper/%27value%27+parameter+is+not+used">See
      JetBrains documentation.</a></p>]]></description>
  </rule>
  <rule key="VirtualMemberNeverOverriden.Global">
    <priority>MINOR</priority>
    <name><![CDATA[Virtual(overridable) member is never overridden: Non-private accessibility]]></name>
    <description><![CDATA[Virtual(overridable) member is never overridden: Non-private accessibility]]></description>
  </rule>
  <rule key="VirtualMemberNeverOverriden.Local">
    <priority>MINOR</priority>
    <name><![CDATA[Virtual(overridable) member is never overridden: Private accessibility]]></name>
    <description><![CDATA[Virtual(overridable) member is never overridden: Private accessibility]]></description>
  </rule>
</rules>